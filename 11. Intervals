{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***11. Intervals (6 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Insert Interval (Medium)***\n","\n","https://leetcode.com/problems/insert-interval/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["from typing import List\n","\n","class Solution:\n","  def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n","    res = []\n","\n","    for i in range(len(intervals)):\n","      if newInterval[1] < intervals[i][0]: # end of newInterval is less than start of current interval\n","        res.append(newInterval)\n","        return res + intervals[i:] # remaining intervals will be added after\n","      elif newInterval[0] > intervals[i][1]: # start of newInterval is greater than end of current interval\n","        res.append(intervals[i]) # current interval will be added first\n","      else:\n","        newInterval = [min(newInterval[0], intervals[i][0]), # min of starts\n","                       max(newInterval[1], intervals[i][1])] # max of ends\n","\n","    res.append(newInterval) # in case first if statement is not activated\n","    return res"]},{"cell_type":"markdown","source":["***2. Merge Intervals (Medium)***\n","\n","https://leetcode.com/problems/merge-intervals/\n","\n"],"metadata":{"id":"eCzklhGr5_Jc"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n","    # O(nlogn)\n","    intervals.sort(key = lambda i: i[0]) # starts with first val in interval\n","    output = [intervals[0]] # adding with 1st interval to avoid edge case\n","\n","    for start, end in intervals[1:]:\n","      lastEnd = output[-1][1] # getting last interval and its end\n","\n","      if start <= lastEnd:\n","        output[-1][1] = max(lastEnd, end) # we don't know which end is larger\n","      else:\n","        output.append([start, end])\n","    return output"],"metadata":{"id":"J7Bznv5F6Ndd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Non Overlapping Intervals  (Medium)***\n","\n","https://leetcode.com/problems/non-overlapping-intervals/\n"],"metadata":{"id":"k5YDZG5uK8Ti"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def eraseOvelapIntervals(self, intervals: List[List[int]]) -> int:\n","    intervals.sort() # sorted(intervals)\n","\n","    res = 0\n","    prevEnd = intervals[0][1]\n","    for start, end in intervals[1:]:\n","      if start >= prevEnd: # no overlap, start is greater than previous end\n","        prevEnd = end # new end value is greater than the previous one\n","      else:\n","        res += 1\n","        prevEnd = min(end, prevEnd) # we need the minimum number to remove\n","    return res"],"metadata":{"id":"daFU1X7KK-dq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Meeting Rooms  (Easy)***\n","\n","https://leetcode.com/problems/meeting-rooms/\n","\n","https://www.lintcode.com/problem/920/\n"],"metadata":{"id":"jrRq9Ov0K-1I"}},{"cell_type":"code","source":["class Interval(object):\n","  def __init__(self, start, end):\n","    self.start = start\n","    self.end = end\n","\n","class Solution:\n","  def can_attend_meetings(self, intervals: List[Interval]) -> bool:\n","    intervals.sort(key = lambda i: i.start) # sort based on the start time\n","\n","    for i in range(1, len(intervals)):\n","      i1 = intervals[i - 1]\n","      i2 = intervals[i]\n","\n","      if i1.end > i2.start: # compare end time and start time\n","        return False\n","    return True"],"metadata":{"id":"g9-Ib_QKLA4O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Meeting Rooms II (Medium)***\n","\n","https://leetcode.com/problems/meeting-rooms-ii/\n","\n","https://www.lintcode.com/problem/919/"],"metadata":{"id":"3e1sC6vALBU1"}},{"cell_type":"code","source":["class Interval(object):\n","  def __init__(self, start, end):\n","    self.start = start\n","    self.end = end\n","\n","class Solution:\n","  def min_meeting_rooms(self, intervals: List[Interval]) -> int:\n","    start = sorted([i.start for i in intervals]) # array with all start values\n","    end = sorted([i.end for i in intervals]) # array with all end values\n","\n","    res, count = 0, 0\n","    s, e = 0, 0 # two pointers for start and end arrays\n","    while s < len(intervals): # start pointer will reach to the end first\n","      if start[s] < end[e]: # start time is smaller\n","        s += 1\n","        count += 1\n","      else: # start time is equal or larger than end time\n","        e += 1\n","        count -= 1\n","      res = max(res, count)\n","    return res"],"metadata":{"id":"w3FbbWfwLC6V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Minimum Interval to Include Each Query (Hard)***\n","\n","https://leetcode.com/problems/minimum-interval-to-include-each-query/"],"metadata":{"id":"bOIO8Nx_LDat"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n","    intervals.sort()\n","\n","    minHeap = []\n","    res, i = {}, 0\n","    for q in sorted(queries):\n","      while i < len(intervals) and intervals[i][0] <= q:\n","        l, r = intervals[i]\n","        heapq.heappush(minHeap, (r - l + 1, r)) # distance, end value\n","        i += 1\n","\n","      while minHeap and minHeap[0][1] < q:\n","        heapq.heappop(minHeap)\n","      res[q] = minHeap[0][0] if minHeap else -1\n","\n","    return [res[q] for q in queries]"],"metadata":{"id":"sx18sKl9LENt","executionInfo":{"status":"ok","timestamp":1713901300089,"user_tz":420,"elapsed":227,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}}},"execution_count":6,"outputs":[]}]}