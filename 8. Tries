{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***8. Tries (3 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Implement Trie Prefix Tree (Medium)***\n","\n","https://leetcode.com/problems/implement-trie-prefix-tree/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["class TrieNode:\n","  def __init__(self):\n","    self.children = {} # a : TrieNode\n","    self.endOfWord = False\n","\n","class Trie:\n","  def __init__(self):\n","    self.root = TrieNode()\n","\n","  def insert(self, word: str) -> None:\n","    cur = self.root\n","\n","    for c in word:\n","      if c not in cur.children:\n","        cur.children[c] = TrieNode()\n","      cur = cur.children[c]\n","    cur.endOfWord = True\n","\n","  def search(self, word: str) -> bool:\n","    cur = self.root\n","\n","    for c in word:\n","      if c not in cur.children:\n","        return False\n","      cur = cur.children[c]\n","    return cur.endOfWord\n","\n","  def startsWith(self, prefix: str) -> bool:\n","    cur = self.root\n","\n","    for c in prefix:\n","      if c not in cur.children:\n","        return False\n","      cur = cur.children[c]\n","    return True"]},{"cell_type":"markdown","source":["***2. Design Add and Search Word Data Structure (Medium)***\n","\n","https://leetcode.com/problems/design-add-and-search-words-data-structure/"],"metadata":{"id":"8BGYul0c40gM"}},{"cell_type":"code","source":["class TrieNode:\n","  def __init__(self):\n","    self.children = {} # a : TrieNode\n","    self.word = False\n","\n","class WordDictionary:\n","  def __init__(self):\n","    self.root = TrieNode()\n","\n","  def addWord(self, word: str) -> None:\n","    cur = self.root\n","    for c in word:\n","      if c not in cur.children:\n","        cur.children[c] = TrieNode()\n","      cur = cur.children[c]\n","    cur.word = True\n","\n","  def search(self, word: str) -> bool:\n","    def dfs(j, root):\n","      cur = root\n","\n","      for i in range(j, len(word)):\n","        c = word[i]\n","\n","        if c == \".\":\n","          for child in cur.children.values():\n","            if dfs(i + 1, child):\n","              return True\n","          return False\n","\n","        else:\n","          if c not in cur.children:\n","            return False\n","          cur = cur.children[c]\n","        return cur.word\n","\n","    return dfs(0, self.root)"],"metadata":{"id":"x4U-kyPs48Sd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Word Search II (Hard)***\n","\n","https://leetcode.com/problems/word-search-ii/"],"metadata":{"id":"uo73Dw-KKHm1"}},{"cell_type":"code","source":["from typing import List\n","\n","class TrieNode:\n","  def __init__(self):\n","    self.children = {}\n","    self.isWord = False\n","\n","  def addWord(self, word):\n","    cur = self\n","    for c in word:\n","      if c not in cur.children:\n","        cur.children[c] = TrieNode()\n","      cur = cur.children[c]\n","    cur.isWord = True\n","\n","class Solution:\n","  def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n","    root = TrieNode()\n","    for w in words:\n","      root.addWord(w)\n","\n","    ROWS, COLS = len(board), len(board[0])\n","    res, visit = set(), set()\n","\n","    def dfs(r, c, node, word):\n","      if (r < 0 or c < 0 or\n","          r == ROWS or c == COLS or\n","          (r, c) in visit or board[r][c] not in node.children):\n","        return\n","\n","      visit.add((r, c))\n","      node = node.children[board[r][c]]\n","      word += board[r][c]\n","      if node.isWord:\n","        res.add(word)\n","\n","      dfs(r - 1, c, node, word)\n","      dfs(r + 1, c, node, word)\n","      dfs(r, c - 1, node, word)\n","      dfs(r, c + 1, node, word)\n","      visit.remove((r, c))\n","\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        dfs(r, c, root, \"\")\n","\n","    return list(res)"],"metadata":{"id":"KQDrZxKJKI8r"},"execution_count":null,"outputs":[]}]}