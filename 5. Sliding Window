{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***5. Sliding Window (6 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Best Time to Buy And Sell Stock (Easy)***\n","\n","https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712789697365,"user_tz":420,"elapsed":17,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"598e9354-8589-434a-da86-2c7d940c7675"},"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}],"source":["from typing import List\n","\n","# Sliding window problem\n","\n","def max_profit(prices: List[int]) -> int:\n","    left, right = 0, 1\n","    maxP = 0\n","\n","    while right < len(prices):\n","        if prices[left] < prices[right]:\n","            profit = prices[right] - prices[left]\n","            maxP = max(maxP, profit)\n","        else:\n","            left = right\n","        right += 1\n","    return maxP\n","\n","print(max_profit([7, 1, 5, 3, 6, 4]))"]},{"cell_type":"markdown","source":["***2. Longest Substring Without Repeating Characters (Medium)***\n","\n","https://leetcode.com/problems/longest-substring-without-repeating-characters/\n"],"metadata":{"id":"1Fski6tf2muv"}},{"cell_type":"code","source":["class Solution:\n","  def length_of_longest_substring(self, s: str) -> int:\n","    char_set = set()\n","    left = 0\n","    result = 0\n","\n","    for right in range(len(s)):\n","      while s[right] in char_set:\n","        char_set.remove(s[left])\n","        left += 1\n","      char_set.add(s[right])\n","      result = max(result, right - left + 1)\n","    return result\n","\n","sol = Solution()\n","\n","s = \"abcabcbb\"\n","print(sol.length_of_longest_substring(s))"],"metadata":{"id":"ZqlOniYR3Ie9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712798114294,"user_tz":420,"elapsed":7,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}},"outputId":"eca401b4-b84b-446b-b31f-10592637ff59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"markdown","source":["***3. Longest Repeating Character Replacement (Medium)***\n","\n","https://leetcode.com/problems/longest-repeating-character-replacement/"],"metadata":{"id":"mi7K1hPQImr7"}},{"cell_type":"code","source":["class Solution:\n","  def character_replacement(self, s: str, k: int) -> int:\n","    count = {}\n","    result = 0\n","\n","    left = 0\n","    max_frequency = 0\n","\n","    for right in range(len(s)):\n","      count[s[right]] = 1 + count.get(s[right], 0)\n","      max_frequency = max(max_frequency, count[s[right]])\n","\n","      while (right - left + 1) - max_frequency > k:\n","        count[s[left]] -= 1\n","        left += 1\n","\n","      result = max(result, right - left + 1)\n","    return result\n","\n","sol = Solution()\n","s = \"ABAB\"\n","k = 2\n","print(sol.character_replacement(s, k))"],"metadata":{"id":"ulZ0zE6sIofZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712798144674,"user_tz":420,"elapsed":182,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}},"outputId":"79d90a22-247a-4a4d-dc40-67c9a137f9f6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"markdown","source":["***4. Permutation in String (Medium)***\n","\n","https://leetcode.com/problems/permutation-in-string/"],"metadata":{"id":"noYP0S-xIo-q"}},{"cell_type":"code","source":["from collections import Counter\n","\n","class Solution:\n","    def checkInclusion(self, s1: str, s2: str) -> bool:\n","        # Count the characters in s1\n","        s1_counter = Counter(s1)\n","        # Length of the substring to check in s2\n","        window_size = len(s1)\n","\n","        # Iterate over s2 with window_size\n","        for i in range((len(s2) - window_size) + 1):\n","        # making sure that right pointer of window doesn't go out of bound\n","            # If the window contains the same characters as s1, return True\n","            if Counter(s2[i:i+window_size]) == s1_counter:\n","                return True\n","        # If no permutation of s1 is found in s2, return False\n","        return False\n","\n","# Bing AI solution"],"metadata":{"id":"Wx-LDTnnIsCa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Minimum Window Substring (Hard)***\n","\n","https://leetcode.com/problems/minimum-window-substring/\n"],"metadata":{"id":"iC0YKDJ6IscS"}},{"cell_type":"code","source":["class Solution:\n","  def min_window(self, s: str, t: str) -> str:\n","    if t == \"\": return \"\"\n","\n","    countT, window = {}, {} # for t and current window\n","\n","    for c in t:\n","      countT[c] = 1 + countT.get(c, 0)\n","\n","    have, need = 0, len(countT)\n","    res, resLen = [-1, -1], float(\"infinity\") # initializing with some values\n","    l = 0\n","    for r in range(len(s)):\n","      c = s[r]\n","      window[c] = 1 + window.get(c, 0) # adding current c to window hash map\n","\n","      if c in countT and window[c] == countT[c]:\n","        have += 1\n","\n","      while have == need: # as long as current window meets that condition\n","        # update our result\n","        if (r - l + 1) < resLen:\n","          res = [l, r]\n","          resLen = (r - l + 1)\n","\n","        # pop from the left of our window\n","        window[s[l]] -= 1\n","        if s[l] in countT and window[s[l]] < countT[s[l]]:\n","          have -= 1\n","        l += 1\n","\n","    l, r = res\n","    return s[l:r+1] if resLen != float(\"infinity\") else \"\"\n","\n","sol = Solution()\n","s = \"ADOBECODEBANC\"\n","t = \"ABC\"\n","\n","print(sol.min_window(s, t))"],"metadata":{"id":"DkxvrjAFIuZa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713046219705,"user_tz":420,"elapsed":8,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}},"outputId":"8bc17327-ddf2-46bd-e42a-0f98da77d26c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["BANC\n"]}]},{"cell_type":"markdown","source":["***6. Sliding Window Maximum (Hard)***\n","\n","https://leetcode.com/problems/sliding-window-maximum/"],"metadata":{"id":"Nut-QdRkIu96"}},{"cell_type":"code","source":["from typing import List\n","import collections\n","\n","# Monotonically Decreasing Queue\n","class Solution:\n","  def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n","    output = []\n","    q = collections.deque() # index\n","    l = r = 0\n","\n","    while r < len(nums):\n","      # pop smaller values from q\n","      while q and nums[q[-1]] < nums[r]: # num in q must be larger\n","        q.pop()\n","      q.append(r) # will store index\n","\n","      # remove left val from window/handling edge cases\n","      if l > q[0]: # we are storing index in q\n","        q.popleft()\n","\n","      if (r + 1) >= k:\n","        output.append(nums[q[0]])\n","        l += 1 # will be increased till it reaches the given window size\n","\n","      r += 1 # will be increased every iteration of loop\n","\n","    return output"],"metadata":{"id":"uoySAC0fIvr5"},"execution_count":null,"outputs":[]}]}