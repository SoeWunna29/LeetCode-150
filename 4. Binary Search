{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***4. Binary Search (7 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Binary Search (Easy)***\n","\n","https://leetcode.com/problems/binary-search/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["from typing import List\n","\n","class Solution:\n","    def search(self, nums: List[int], target: int) -> int:\n","        l, r = 0, len(nums) -1\n","\n","        while l <= r:\n","            m = l + ((r - l) // 2)\n","            if nums[m] < target:\n","                l = m + 1\n","            elif nums[m] > target:\n","                r = m - 1\n","            else:\n","                return m\n","        return -1"]},{"cell_type":"markdown","source":["***2. Search a 2D Matrix (Medium)***\n","\n","https://leetcode.com/problems/search-a-2d-matrix/\n"],"metadata":{"id":"V3se86Pz2HWV"}},{"cell_type":"code","source":["class Solution:\n","    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n","        for num in matrix:\n","            if target in num:\n","                return True\n","        return False"],"metadata":{"id":"7zUmM8v92f1u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n","      ROWS, COLS = len(matrix), len(matrix[0])\n","      # Binary search for row in matrix that might contain target val\n","      top, bot = 0, ROWS - 1\n","      while top <= bot:\n","        row = (top + bot) // 2 # finding mid row\n","        if target > matrix[row][-1]:\n","          top = row + 1\n","        elif target < matrix[row][0]:\n","          bot = row - 1\n","        else:\n","          break\n","\n","      if not (top <= bot): # none of the rows contain target val\n","        return False\n","\n","      # Binary search for target val in the row\n","      row = (top + bot) // 2\n","      l, r = 0, COLS - 1\n","      while l <= r:\n","        m = (l + r) // 2\n","        if target > matrix[row][m]:\n","          l = m + 1\n","        elif target < matrix[row][m]:\n","          r = m - 1\n","        else:\n","          return True\n","      return False"],"metadata":{"id":"m1-lpLbZUt5t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. KoKo Eating Bananas (Medium)***\n","\n","https://leetcode.com/problems/koko-eating-bananas/"],"metadata":{"id":"f9_Ua4C_ISU0"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def minEatingSpeed(self, piles: List[int], h: int) -> int:\n","    l, r = 1, max(piles) # min eating rate is 1, max rate is max val in pile\n","    res = r # max rate will always work as the last resort\n","\n","    while l <= r:\n","      k = (l + r) // 2\n","      hours = 0\n","      for p in piles:\n","        hours += math.ceil(p / k)\n","\n","      if hours <= h:\n","        res = min(res, k)\n","        r = k - 1 # decrease the rate\n","      else:\n","        l = k + 1 # increase the rate\n","\n","    return res"],"metadata":{"id":"A9Ys-9dEITeq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Find Minimum in Rotated Sorted Array (Medium)***\n","\n","https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"],"metadata":{"id":"R1-Vb8drIU4D"}},{"cell_type":"code","source":["# Left, Right & Middle Pointer Problem\n","\n","def find_min(nums):\n","    result = nums[0]\n","    left = 0\n","    right = len(nums) - 1\n","\n","    while left <= right:\n","        if nums[left] < nums[right]:\n","            result = min(result, nums[left])\n","            break\n","\n","        middle = (left + right) // 2\n","        result = min(result, nums[middle])\n","        if nums[middle] >= nums[left]:\n","            left = middle + 1\n","        else:\n","            right = middle - 1\n","\n","    return result\n","\n","nums = [4, 5, 6, 7, 0, 1, 2]\n","print(find_min(nums))"],"metadata":{"id":"XIkbqW7AIYaq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712789791177,"user_tz":420,"elapsed":207,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"17496a12-3fb0-4ce9-a9fb-afc1853e4ef1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["nums = [2, 4, 5, 1, 2]\n","\n","left = 0\n","right = len(nums) - 1\n","\n","while left < right:\n","  mid = left + (right - left) // 2\n","\n","  if nums[mid] > nums[right]:\n","    left = mid + 1\n","  else:\n","    right = mid\n","\n","print(nums[left])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1dy3c9dgOj8L","executionInfo":{"status":"ok","timestamp":1712789802039,"user_tz":420,"elapsed":189,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"d0ec30f1-8aed-434f-859d-48d86d9c90c5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"markdown","source":["***5. Search in a Rotated Sorted Array (Medium)***\n","\n","https://leetcode.com/problems/search-in-rotated-sorted-array/"],"metadata":{"id":"F1UZUWykIZVr"}},{"cell_type":"code","source":["# Left, Right & Middle Pointer Problem\n","# Binary Search Problem\n","\n","def find_num(nums, target):\n","    left = 0\n","    right = len(nums) - 1\n","\n","    while left <= right:\n","        middle = (left + right) // 2\n","        if target == nums[middle]:\n","            return middle\n","\n","        # left sorted portion\n","        if nums[left] <= nums[middle]:\n","            if target > nums[middle] or target < nums[left]: # t < leftmost\n","                left = middle + 1\n","            else:\n","                right = middle - 1\n","\n","        # right sorted portion\n","        else:\n","            if target < nums[middle] or target > nums[right]: # t > rightmost\n","                right = middle - 1\n","            else:\n","                left = middle + 1\n","\n","    return -1\n","\n","nums = [4, 5, 6, 7, 0, 1, 2]\n","target = 2\n","print(find_num(nums, target))"],"metadata":{"id":"uUlVmfAyIbVS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712789813803,"user_tz":420,"elapsed":199,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"02e7a16d-30c4-40ee-c4c9-9225a90ef923"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6\n"]}]},{"cell_type":"markdown","source":["***6. Time Based Key Value Store (Medium)***\n","\n","https://leetcode.com/problems/time-based-key-value-store/"],"metadata":{"id":"XSKRoM-gIbvC"}},{"cell_type":"code","source":["class TimeMap:\n","\n","  def __init__(self):\n","    self.store = {} # key: list of [val, timestamp]\n","\n","  def set(self, key: str, value: str, timestamp: int) -> None:\n","    if key not in self.store:\n","      self.store[key] = []\n","    self.store[key].append([value, timestamp])\n","\n","  def get(self, key: str, timestamp: int) -> str:\n","    res = \"\"\n","    values = self.store.get(key, [])\n","\n","    # binary search\n","    l, r = 0, len(values) - 1\n","    while l <= r:\n","      m = (l + r) // 2\n","      if values[m][1] <= timestamp:\n","        res = values[m][0]\n","        l = m + 1\n","      else:\n","        r = m - 1\n","    return res"],"metadata":{"id":"0KjAn9fFId0C"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Median of Two Sorted Arrays (Hard)***\n","\n","https://leetcode.com/problems/median-of-two-sorted-arrays/"],"metadata":{"id":"CzVrnEJPIeJr"}},{"cell_type":"code","source":["class Solution:\n","  def findMedianSortedArrays(self, nums1, nums2):\n","    # Combine and sort the arrays\n","    nums = sorted(nums1 + nums2)\n","    mid = len(nums) // 2\n","\n","    # Check if the length of the combined array is odd\n","    if len(nums) % 2 != 0:\n","      return float(nums[mid])\n","    else:\n","        # For even length, the median is the average of the two middle numbers\n","      return (nums[mid - 1] + nums[mid]) / 2.0"],"metadata":{"id":"Wv6Ber3fIe-a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Solution:\n","  def findMedianSortedArrays(self, nums1, nums2):\n","    A, B = nums1, nums2\n","    total = len(nums1) + len(nums2)\n","    half = total // 2\n","\n","    if len(B) < len(A):\n","      A, B = B, A\n","    # log(min(n, m))\n","    l, r = 0, len(A) - 1\n","    while True:\n","      i = (l + r) // 2 # A\n","      j = half - i - 2 # B\n","\n","      Aleft = A[i] if i >= 0 else float(\"-infinity\")\n","      Aright = A[i + 1] if (i + 1) < len(A) else float(\"infinity\")\n","      Bleft = B[j] if j >= 0 else float(\"-infinity\")\n","      Bright = B[j + 1] if (j + 1) < len(B) else float(\"infinity\")\n","\n","      # partition is correct\n","      if Aleft <= Bright and Bleft <= Aright:\n","        # odd\n","        if total % 2:\n","          return min(Aright, Bright)\n","        # even\n","        return (max(Aleft, Bleft) + min(Aright, Bright)) / 2\n","      elif Aleft > Bright:\n","        r = i - 1\n","      else:\n","        l = i + 1"],"metadata":{"id":"t6o1NtNarJ9R"},"execution_count":null,"outputs":[]}]}