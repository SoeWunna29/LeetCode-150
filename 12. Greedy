{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***12. Greedy (8 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Maximum Subarray (Medium)***\n","\n","https://leetcode.com/problems/maximum-subarray/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713653016365,"user_tz":420,"elapsed":7,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}},"outputId":"0398ac2f-f4d9-4e0e-a308-0b25b946d193"},"outputs":[{"output_type":"stream","name":"stdout","text":["6\n"]}],"source":["from typing import List\n","\n","# Sliding window problem, Kadane Algorithm\n","\n","def max_sub_array(nums: List[int]) -> int:\n","    max_sub = nums[0]\n","    current_sum = 0\n","\n","    for n in nums:\n","        if current_sum < 0: # current_sum = max(current_sum, 0)\n","            current_sum = 0\n","        current_sum += n\n","        max_sub = max(max_sub, current_sum)\n","    return max_sub\n","\n","nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n","print(max_sub_array(nums))"]},{"cell_type":"markdown","source":["***2. Jump Game (Medium)***\n","\n","https://leetcode.com/problems/jump-game/\n"],"metadata":{"id":"XrQU_7av6RWn"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def canJump(self, nums: List[int]) -> bool:\n","    goal = len(nums) - 1\n","\n","    for i in range(len(nums) - 1, -1, -1): # check from the end/backward\n","      if i + nums[i] >= goal: # goal is index of array/not value\n","        # i + nums[i] -> current index + no jumps available at that index\n","        goal = i\n","\n","    return True if goal == 0 else False"],"metadata":{"id":"DscPnR3K6noS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Jump Game II (Medium)***\n","\n","https://leetcode.com/problems/jump-game-ii/\n"],"metadata":{"id":"fy4wj5LyLJ1_"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def jump(self, nums: List[int]) -> int:\n","    res = 0\n","    l = r = 0\n","\n","    while r < len(nums) - 1:\n","      farthest = 0\n","      for i in range(l, r + 1): # r + 1 inculsive of r\n","        farthest = max(farthest, i + nums[i])\n","        # i + nums[i] -> current index + no jumps available at that index\n","      l = r + 1\n","      r = farthest\n","      res += 1\n","    return res"],"metadata":{"id":"v88-2nK6LL99"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Gas Station (Medium)***\n","\n","https://leetcode.com/problems/gas-station/"],"metadata":{"id":"RZbYiD6zLMVu"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n","    # total gas must be equal or more than cost to finish looping\n","    if sum(gas) < sum(cost):\n","      return -1\n","\n","    total = 0\n","    res = 0 # starting position\n","    for i in range(len(gas)):\n","      total += (gas[i] - cost[i])\n","      if total < 0:\n","        total = 0\n","        res = i + 1 # next starting position\n","\n","    return res"],"metadata":{"id":"VrUx8KRuLON1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Hand of Straights (Medium)***\n","\n","https://leetcode.com/problems/hand-of-straights/\n"],"metadata":{"id":"Rr8oUNpyLOq9"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n","    if len(hand) % groupSize:\n","      return False\n","\n","    count = {}\n","    for n in hand:\n","      count[n] = 1 + count.get(n, 0) # Counter can also be used\n","\n","    minH = list(count.keys()) # min heap works with list\n","    heapq.heapify(minH)\n","\n","    while minH:\n","      first = minH[0] # min heap index 0 gives as minimum value\n","\n","      for i in range(first, first + groupSize):\n","        if i not in count:\n","          return False\n","        count[i] -= 1\n","        if count[i] == 0:\n","          if i != minH[0]: # key trick\n","            return False\n","          heapq.heappop(minH)\n","\n","    return True"],"metadata":{"id":"SDwHVPS-LQpL","executionInfo":{"status":"ok","timestamp":1713730939342,"user_tz":420,"elapsed":17,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["***6. Merge Triplets to From Target Triplet (Medium)***\n","\n","https://leetcode.com/problems/merge-triplets-to-form-target-triplet/"],"metadata":{"id":"K4iLvtgSLRBz"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:\n","    good = set()\n","\n","    for t in triplets:\n","      if t[0] > target[0] or t[1] > target[1] or t[2] > target[2]:\n","        continue\n","\n","      for i, v in enumerate(t):\n","        if v == target[i]:\n","          good.add(i)\n","\n","    return len(good) == 3"],"metadata":{"id":"ckJmxgvWLS_T"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Partition Labels (Medium)***\n","\n","https://leetcode.com/problems/partition-labels/\n"],"metadata":{"id":"TOrYvaeBLTdi"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def partitionLabels(self, s: str) -> List[int]:\n","    lastIndex = {} # char -> last index in s\n","\n","    for i, c in enumerate(s):\n","      lastIndex[c] = i # last index will be updated with loop\n","\n","    res = []\n","    size, end = 0, 0\n","    for i, c in enumerate(s):\n","      size += 1\n","      end = max(end, lastIndex[c])\n","\n","      if i == end:\n","        res.append(size)\n","        size = 0 # new partition will start\n","      # end doesn't need to be updated here since max is taken every iteration\n","\n","    return res"],"metadata":{"id":"S8F6j02FLVSS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Valid Parenthesis String (Medium)***\n","\n","https://leetcode.com/problems/valid-parenthesis-string/"],"metadata":{"id":"wzFev75sLVmy"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def checkValidString(self, s: str) -> bool:\n","    leftMin, leftMax = 0, 0\n","\n","    for c in s:\n","      if c == \"(\":\n","        leftMin, leftMax = leftMin + 1, leftMax + 1\n","      elif c == \")\":\n","        leftMin, leftMax = leftMin - 1, leftMax - 1\n","      else:\n","        leftMin, leftMax = leftMin - 1, leftMax + 1\n","\n","      if leftMax < 0:\n","        return False\n","      if leftMin < 0: # for this case -> s = ( * ) (\n","        leftMin = 0\n","\n","    return leftMin == 0"],"metadata":{"id":"tyTiRK9JLWqa"},"execution_count":null,"outputs":[]}]}