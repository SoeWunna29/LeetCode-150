{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***7. Trees (15 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Invert Binary Tree (Easy)***\n","\n","https://leetcode.com/problems/invert-binary-tree/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["class TreeNode:\n","  def __init__(self, value=0, left=None, right=None):\n","    self.value = value\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def invert_tree(self, root: TreeNode) -> TreeNode:\n","    if not root:\n","      return None\n","\n","    # swap the children\n","    tmp = root.left\n","    root.left = root.right\n","    root.right = tmp\n","\n","    self.invert_tree(root.left)\n","    self.invert_tree(root.right)\n","    return root"]},{"cell_type":"markdown","source":["***2. Maximum Depth of Binary Tree (Easy)***\n","\n","https://leetcode.com/problems/maximum-depth-of-binary-tree/\n"],"metadata":{"id":"RC1vB2bG3yeg"}},{"cell_type":"code","source":["from typing_extensions import Deque\n","class TreeNode:\n","  def __init__(self, value=0, left=None, right=None):\n","    self.value = value\n","    self.left = left\n","    self.right = right\n","\n","# Recursive Depth First Search Method\n","class Solution:\n","  def max_depth(self, root: TreeNode) -> int:\n","    if not root:\n","      return 0\n","\n","    # 1 + left + right (formula for height of bst)\n","    return 1 + max(self.max_depth(root.left), self.max_depth(root.right))\n","\n","# Breadth First Search\n","class Solution:\n","  def max_depth(self, root: TreeNode) -> int:\n","    if not root:\n","      return 0\n","\n","    level = 0\n","    q = deque([root])\n","    while q:\n","      for i in range(len(q)):\n","        node = q.popleft()\n","        if node.left:\n","          q.append(node.left)\n","        if node.rigth:\n","          q.append(node.right)\n","      level += 1\n","    return level\n","\n","# Iterative Depth First Search (DFS without using recursion)\n","class Solution:\n","  def max_depth(self, root: TreeNode) -> int:\n","    stack = [[root, 1]]\n","    res = 0\n","\n","    while stack:\n","      node, depth = stack.pop()\n","\n","      if node:\n","        res = max(res, depth)\n","        stack.append([node.left, depth + 1])\n","        stack.append([node.right, depth + 1])\n","    return res"],"metadata":{"id":"rwwNJToW4uu0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Diameter of Binary Tree (Easy)***\n","\n","https://leetcode.com/problems/diameter-of-binary-tree/\n"],"metadata":{"id":"jiQm34AKJTKZ"}},{"cell_type":"code","source":["class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def diameterOfBinaryTree(self, root: TreeNode) -> int:\n","    res = [0]\n","\n","    def dfs(root):\n","      if not root:\n","        return 0\n","      left = dfs(root.left)\n","      right = dfs(root.right)\n","\n","      res[0] = max(res[0], left + right) # (left + right) is the diameter\n","\n","      return 1 + max(left, right) # 1 + max(left, right) is height\n","\n","    dfs(root)\n","    return res[0]"],"metadata":{"id":"_HtmeeilJVjD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Balanced Binary Tree (Easy)***\n","\n","https://leetcode.com/problems/balanced-binary-tree/"],"metadata":{"id":"naUwUNAnJWIf"}},{"cell_type":"code","source":["class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","    def isBalanced(self, root: TreeNode) -> bool:\n","      def dfs(root):\n","        if not root: return [True, 0] # return [T/F, height]\n","\n","        left = dfs(root.left)\n","        right = dfs(root.right)\n","\n","        # if left and right are balanced and height difference <= 1\n","        balanced = (left[0] and right[0] and\n","                  abs(left[1] - right[1]) <= 1)\n","\n","        return [balanced, 1 + max(left[1], right[1])]\n","\n","      return dfs(root)[0] # only bool"],"metadata":{"id":"_YRAFxu8JYQO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Same Tree (Easy)***\n","\n","https://leetcode.com/problems/same-tree/\n"],"metadata":{"id":"eLPuZb8KJYrj"}},{"cell_type":"code","source":["class TreeNodoe:\n","  def __init__(self, value=0, left=None, right=None):\n","    self.value = value\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def is_same_tree(self, p: TreeNode, q: TreeNode) -> bool:\n","    if not p and not q:\n","      return True\n","    if not p or not q or p.val != q.val:\n","      return False\n","\n","    return (self.is_same_tree(p.left, q.left) and\n","            self.is_same_tree(p.right, q.right))"],"metadata":{"id":"vWR5nlRXJavi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Subtree of Another Tree (Easy)***\n","\n","https://leetcode.com/problems/subtree-of-another-tree/"],"metadata":{"id":"iCNsk-mOJbMi"}},{"cell_type":"code","source":["class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def isSubTree(self, s: TreeNode, t: TreeNode) -> bool:\n","    if not t:\n","      return True\n","    if not s:\n","      return False\n","    if self.sameTree(s, t):\n","      return True\n","    return (self.isSubTree(s.left, t) or\n","            self.isSubTree(s.right, t))\n","\n","  def sameTree(self, s, t):\n","    if not s and not t:\n","      return True\n","    if s and t and s.val == t.val:\n","      return (self.sameTree(s.left, t.left) and\n","              self.sameTree(s.right, t.right))\n","    return False"],"metadata":{"id":"PwJ_A2qFJeyS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Lowest Common Ancenstor of a Binary Search Tree (Medium)***\n","\n","https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/"],"metadata":{"id":"0vSxMil9JfMJ"}},{"cell_type":"code","source":["class TreeNode:\n","    def __init__(self, val=0, left=None, right=None):\n","        self.val = val\n","        self.left = left\n","        self.right = right\n","\n","class Solution:\n","  def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n","    cur = root\n","\n","    while cur:\n","      if p.val > cur.val and q.val > cur.val:\n","        cur = cur.right\n","      elif p.val < cur.val and q.val < cur.val:\n","        cur = cur.left\n","      else:\n","        return cur"],"metadata":{"id":"s76rXOsgJiSC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Binary Tree Level Order Traversal (Medium)***\n","\n","https://leetcode.com/problems/binary-tree-level-order-traversal/\n"],"metadata":{"id":"4osD9FIYJimS"}},{"cell_type":"code","source":["from typing import List\n","\n","class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def levelOrder(self, root: TreeNode) -> List[List[int]]:\n","    res = []\n","\n","    q = collections.deque()\n","    q.append(root)\n","\n","    while q:\n","      qLen = len(q) # making sure that we loop through one level at a time)\n","      level = []\n","      for i in range(qLen):\n","        node = q.popleft()\n","        if node:\n","          level.append(node.val)\n","          q.append(node.left)\n","          q.append(node.right)\n","\n","      if level: # making sure that the level is not empty before adding to res\n","        res.append(level)\n","\n","    return res"],"metadata":{"id":"0z8wo2DRJk0i"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***9. Binary Tree Right Side View (Medium)***\n","\n","https://leetcode.com/problems/binary-tree-right-side-view/\n"],"metadata":{"id":"2wiLOZ7VJlZa"}},{"cell_type":"code","source":["from typing import List\n","\n","class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def rightSideView(self, root: TreeNode) -> List[int]:\n","    res = []\n","    q = collections.deque([root])\n","\n","    while q:\n","      rightSide = None\n","      qLen = len(q)\n","\n","      for i in range(qLen):\n","        node = q.popleft()\n","        if node:\n","          # after loop ends, rightSide will be the rightmost node at each level\n","          rightSide = node\n","          q.append(node.left)\n","          q.append(node.right)\n","\n","      if rightSide:\n","        res.append(rightSide.val)\n","    return res"],"metadata":{"id":"DlqdQ7JiJnua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***10. Count Good Nodes in Binary Tree (Medium)***\n","\n","https://leetcode.com/problems/count-good-nodes-in-binary-tree/\n"],"metadata":{"id":"ZFp-UDLWJoDi"}},{"cell_type":"code","source":["class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def goodNodes(self, root: TreeNode) -> int:\n","    def dfs(node, maxVal):\n","      if not node:\n","        return 0\n","\n","      res = 1 if node.val >= maxVal else 0\n","      maxVal = max(maxVal, node.val)\n","      res += dfs(node.left, maxVal)\n","      res += dfs(node.right, maxVal)\n","      return res\n","\n","    return dfs(root, root.val)"],"metadata":{"id":"9FDbD21nJqgr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***11. Validate Binary Search Tree (Medium)***\n","\n","https://leetcode.com/problems/validate-binary-search-tree/\n"],"metadata":{"id":"qZ9L7zJ4Jq2b"}},{"cell_type":"code","source":["class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def isValidBST(self, root: TreeNode) -> bool:\n","\n","    def valid(node, left, right):\n","      if not node:\n","        return True\n","      if not (node.val < right and node.val > left):\n","        return False\n","\n","      return (valid(node.left, left, node.val) and\n","      valid(node.right, node.val, right))\n","\n","    return valid(root, float(\"-inf\"), float(\"inf\"))"],"metadata":{"id":"whk3ze3oJtnK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***12. Kth Smallest Element in a BST (Medium)***\n","\n","https://leetcode.com/problems/kth-smallest-element-in-a-bst/\n"],"metadata":{"id":"K8rmWDOSJt_K"}},{"cell_type":"code","source":["class TreeNode:\n","    def __init__(self, val=0, left=None, right=None):\n","        self.val = val\n","        self.left = left\n","        self.right = right\n","\n","class Solution:\n","  def kthSmallest(self, root: TreeNode, k: int) -> int:\n","    n = 0\n","    stack = []\n","    cur = root\n","\n","    while cur or stack:\n","      while cur:\n","        stack.append(cur)\n","        cur = cur.left\n","\n","      cur = stack.pop()\n","      n += 1\n","      if n == k:\n","        return cur.val\n","      cur = cur.right"],"metadata":{"id":"vYOH5tCsJwnS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***13. Construct Binary Tree from Preorder and Inorder Traversal (Medium)***\n","\n","https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\n"],"metadata":{"id":"2FHU3BwDJw86"}},{"cell_type":"code","source":["from typing import List\n","\n","class TreeNode:\n","  def __init__(self, val=0, left=None, right=None):\n","    self.val = val\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n","    if not preorder or not inorder:\n","      return None\n","\n","    root = TreeNode(preorder[0])\n","    mid = inorder.index(preorder[0])\n","    root.left = self.buildTree(preorder[1:mid + 1], inorder[:mid])\n","    root.right = self.buildTree(preorder[mid + 1:], inorder[mid + 1:])\n","    return root"],"metadata":{"id":"dEozGWOVJzPq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***14. Binary Tree Maximum Path Sum (Hard)***\n","\n","https://leetcode.com/problems/binary-tree-maximum-path-sum/\n"],"metadata":{"id":"F8x3aU3mJz6C"}},{"cell_type":"code","source":["class TreeNode:\n","  def __init__(self, value=0, left=None, right=None):\n","    self.value = value\n","    self.left = left\n","    self.right = right\n","\n","class Solution:\n","  def max_path_sum(self, root: TreeNode) -> int:\n","    res = [root.value]\n","\n","    # return max path sum without split\n","    def dfs(root):\n","      if not root:\n","        return 0\n","\n","      leftMax = dfs(root.left)\n","      rightMax = dfs(root.right)\n","      leftMax = max(leftMax, 0)\n","      rightMax = max(rightMax, 0)\n","\n","      # compute max path sum with split\n","      res[0] = max(res[0], root.value + leftMax + rightMax)\n","\n","      return root.val + max(leftMax, rightMax)\n","\n","    dfs(root)\n","    return res[0]"],"metadata":{"id":"Q0C0ZbgpJ5jR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***15. Serialize and Deserialize Binary Tree (Hard)***\n","\n","https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"],"metadata":{"id":"ifWrA4NYJ6Z7"}},{"cell_type":"code","source":["class TreeNode:\n","    def __init__(self, val=0, left=None, right=None):\n","        self.val = val\n","        self.left = left\n","        self.right = right\n","\n","class Codec:\n","  def serialize(self, root):\n","    res = []\n","\n","    def dfs(node): # preorder traversal dfs (root -> left -> right)\n","      if not node:\n","        res.append(\"N\")\n","        return\n","      res.append(str(node.val))\n","      dfs(node.left)\n","      dfs(node.right)\n","\n","    dfs(root)\n","    return \",\".join(res)\n","\n","  def deserialize(self, data):\n","    vals = data.split(\",\")\n","    self.i = 0 # declaring global\n","\n","    def dfs():\n","      if vals[self.i] == \"N\":\n","        self.i += 1\n","        return None\n","      node = TreeNode(int(vals[self.i]))\n","      self.i += 1\n","      node.left = dfs()\n","      node.right = dfs()\n","      return node\n","\n","    return dfs()"],"metadata":{"id":"pj6AW39SJ6vR"},"execution_count":null,"outputs":[]}]}