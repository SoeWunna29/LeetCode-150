{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***15. 1-D Dynamic Programming (12 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Climbing Stairs (Easy)***\n","\n","https://leetcode.com/problems/climbing-stairs/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["class Solution:\n","  def climbStairs(self, n: int) -> int:\n","    one, two = 1, 1\n","\n","    for i in range(n - 1):\n","      temp = one\n","      one = one + two\n","      two = temp\n","\n","    return one"]},{"cell_type":"markdown","source":["***2. Min-Cost Climbing Stairs (Easy)***\n","\n","https://leetcode.com/problems/min-cost-climbing-stairs/"],"metadata":{"id":"94bN2T027ifj"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def minCostClimbingStairs(self, cost: List[int]) -> int:\n","    cost.append(0) # [10, 15, 20] + 0, it's missing\n","    # start from * index [10, *15, 20] 0 -> 2 jumps max\n","    for i in range(len(cost) - 3, -1, -1):\n","      cost[i] += min(cost[i + 1], cost[i + 2]) # single jump, double jump\n","\n","    return min(cost[0], cost[1])"],"metadata":{"id":"yBs8RAD1781j","executionInfo":{"status":"ok","timestamp":1714253923697,"user_tz":420,"elapsed":190,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["***3. House Robber (Medium)***\n","\n","https://leetcode.com/problems/house-robber/\n"],"metadata":{"id":"DKiaRNN9Mna2"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def rob(self, nums: List[int]) -> int:\n","    rob1, rob2 = 0, 0\n","\n","    # [rob1, rob2, n, n+1, ...]\n","    for n in nums:\n","      temp = max(n + rob1, rob2)\n","      rob1 = rob2\n","      rob2 = temp\n","    return rob2"],"metadata":{"id":"HNsc3hpxMpLd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. House Robber II (Medium)***\n","\n","https://leetcode.com/problems/house-robber-ii/\n"],"metadata":{"id":"gNGDI2pdMpd9"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def rob(self, nums: List[int]) -> int:\n","    return max(nums[0], self.helper(nums[1:]), self.helper(nums[:-1]))\n","\n","  def helper(self, nums):\n","    rob1, rob2 = 0, 0\n","\n","    for n in nums:\n","      newRob = max(rob1 + n, rob2)\n","      rob1 = rob2\n","      rob2 = newRob\n","    return rob2"],"metadata":{"id":"4DjQuzgRMraU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Longest Palindromic Substring (Medium)***\n","\n","https://leetcode.com/problems/longest-palindromic-substring/\n"],"metadata":{"id":"ChJe8sSzMr3N"}},{"cell_type":"code","source":["class Solution:\n","  def longest_palindrome(self, s: str) -> str:\n","    res = \"\"\n","    resLen = 0\n","\n","    for i in range(len(s)):\n","      # odd length\n","      l = r = i\n","      while l >= 0 and r < len(s) and s[l] == s[r]:\n","        if (r - l + 1) > resLen:\n","          res = s[l:r+1]\n","          resLen = (r - l + 1)\n","        l -= 1\n","        r += 1\n","\n","      # even length\n","      l = i\n","      r = i + 1\n","      while l >= 0 and r < len(s) and s[l] == s[r]:\n","        if (r - l + 1) > resLen:\n","          res = s[l:r+1]\n","          resLen = (r - l + 1)\n","        l -= 1\n","        r += 1\n","\n","    return res\n","\n","sol = Solution()\n","s = \"babad\"\n","print(sol.longest_palindrome(s))"],"metadata":{"id":"OsgEw-aSMtec"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Palindromic Substring (Medium)***\n","\n","https://leetcode.com/problems/palindromic-substrings/"],"metadata":{"id":"sy04O1HMMtz-"}},{"cell_type":"code","source":["class Solution:\n","  def count_substrings(self, s: str) -> int:\n","    res = 0\n","\n","    for i in range(len(s)):\n","      res += self.countPali(s, i, i) # left = i, right = i for odd length\n","      res += self.countPali(s, i, i + 1) # left = i, right = i + 1 for even\n","    return res\n","\n","  def countPali(self, s, l, r):\n","    res = 0\n","    while l >= 0 and r < len(s) and s[l] == s[r]:\n","      res += 1\n","      l -= 1\n","      r += 1\n","    return res\n","\n","sol = Solution()\n","s = \"aaa\"\n","print(sol.count_substrings(s))"],"metadata":{"id":"Kga4vUwFMwTM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Decode Ways (Medium)***\n","\n","https://leetcode.com/problems/decode-ways/\n"],"metadata":{"id":"TxkX7E6QMxB9"}},{"cell_type":"code","source":["class Solution:\n","  def numDecodings(self, s: str) ->int:\n","    # DP - Bottom Up Approach\n","\n","    dp = { len(s) : 1}\n","\n","    for i in range(len(s) - 1, -1, -1):\n","      if s[i] == \"0\":\n","        dp[i] = 0\n","      else:\n","        dp[i] == dp[i + 1]\n","\n","      if (i + 1 < len(s) and (s[i] == \"1\" or\n","          s[i] == \"2\" and s[i + 1] in \"0123456\")):\n","          dp[i] += dp[i + 2]\n","    return dp[0]"],"metadata":{"id":"XC63hi5zMy8l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Solution:\n","  def numDecodings(self, s: str) ->int:\n","    # DFS approach\n","\n","    dp = { len(s) : 1 }\n","\n","    def dfs(i):\n","      if i in dp:\n","        return dp[i]\n","      if s[i] == \"0\":\n","        return 0\n","\n","      res = dfs(i + 1)\n","      if (i + 1 < len(s) and (s[i] == \"1\" or\n","          s[i] == \"2\" and s[i + 1] in \"0123456\")):\n","          res += dfs(i + 2)\n","      dp[i] = res\n","\n","    return dfs(0)"],"metadata":{"id":"kah8BMzA84on"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Coin Change (Medium)***\n","\n","https://leetcode.com/problems/coin-change/"],"metadata":{"id":"YYBmfmDeM00f"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def coinChange(self, coins: List[int], amount: int) -> int:\n","    dp = [amount + 1] * (amount + 1) # 0...up to amount\n","    dp[0] = 0\n","\n","    for a in range(1, amount + 1):\n","      for c in coins:\n","        if a - c >= 0:\n","          dp[a] = min(dp[a], 1 + dp[a - c])\n","\n","    return dp[amount] if dp[amount] != amount + 1 else -1"],"metadata":{"id":"qIuwB_05M2rH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***9. Maximum Product Subarray (Medium)***\n","\n","https://leetcode.com/problems/maximum-product-subarray/\n"],"metadata":{"id":"zJLuF34SM3N3"}},{"cell_type":"code","source":["class Solution:\n","  def maxProduct(self, nums: List[int]) -> int:\n","    # O(n)/O(1) : Time/Memory\n","    res = nums[0]\n","    curMin, curMax = 1, 1\n","\n","    for n in nums:\n","      tmp = curMax * n\n","      curMax = max(n * curMax, n * curMin, n)\n","      curMin = min(tmp, n * curMin, n)\n","      res = max(res, curMax)\n","    return res"],"metadata":{"id":"UqIfl4w9M5Z-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***10. Word Break (Medium)***\n","\n","https://leetcode.com/problems/word-break/\n"],"metadata":{"id":"UMolZzgWM5sf"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n","\n","    dp = [False] * (len(s) + 1)\n","    dp[len(s)] = True\n","\n","    for i in range(len(s) - 1, -1, -1):\n","      for w in wordDict:\n","        if (i + len(w)) <= len(s) and s[i : i + len(w)] == w:\n","          dp[i] = dp[i + len(w)]\n","        if dp[i]:\n","          break\n","\n","    return dp[0]"],"metadata":{"id":"4Um8puB7M7w2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***11. Longest Increasing Subsequence (Medium)***\n","\n","https://leetcode.com/problems/longest-increasing-subsequence/\n"],"metadata":{"id":"C4j2Dz6oM8FX"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def lengthOfLIS(self, nums: List[int]) -> int:\n","    LIS = [1] * len(nums)\n","\n","    for i in range(len(nums) - 1, -1, -1):\n","      for j in range(i + 1, len(nums)):\n","        if nums[i] < nums[j]:\n","          LIS[i] = max(LIS[i], 1 + LIS[j])\n","\n","    return max(LIS)"],"metadata":{"id":"qiKR04TDM9ze"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***12. Partition Equal Sum (Medium)***\n","\n","https://leetcode.com/problems/partition-equal-subset-sum/"],"metadata":{"id":"3hYQ2HImM-Hv"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def canPartition(self, nums: List[int]) -> bool:\n","    if sum(nums) % 2:\n","      return False\n","\n","    dp = set()\n","    dp.add(0)\n","    target = sum(nums) // 2\n","\n","    for i in range(len(nums) - 1, -1, -1):\n","      nextDP = set()\n","      for t in dp:\n","        nextDP.add(t + nums[i])\n","        nextDP.add(t)\n","      dp = nextDP\n","\n","    return True if target in dp else False"],"metadata":{"id":"ofFJniJlM-t-","executionInfo":{"status":"ok","timestamp":1714253614111,"user_tz":420,"elapsed":8,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":1,"outputs":[]}]}