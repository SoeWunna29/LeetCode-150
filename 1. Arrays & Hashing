{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***1. Arrays & Hashing (9 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Contains Duplicate (Easy)***\n","\n","https://leetcode.com/problems/contains-duplicate/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"wEvD2gXtcT7q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713993722228,"user_tz":420,"elapsed":29,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"6b08de31-8304-4cdc-d352-985d9f8de9f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}],"source":["def contains_duplicate(nums):\n","    hash_set = set()\n","\n","    for n in nums:\n","        if n in hash_set:\n","            return True\n","        hash_set.add(n)\n","    return False\n","\n","print(contains_duplicate([1, 2, 3, 5, 5, 1, 2]))\n","\n","# set consumes less space than list"]},{"cell_type":"markdown","source":["***2. Valid Anagram (Easy)***\n","\n","https://leetcode.com/problems/valid-anagram/"],"metadata":{"id":"EEyxEaTl0Xsy"}},{"cell_type":"code","source":["def isAnagram(s, t):\n","    if len(s) != len(t):\n","        return False\n","\n","    s_freq = {}\n","    t_freq = {}\n","\n","    # Count character frequencies in string s\n","    for char in s:\n","        s_freq[char] = s_freq.get(char, 0) + 1\n","\n","    # Count character frequencies in string t\n","    for char in t:\n","        t_freq[char] = t_freq.get(char, 0) + 1\n","\n","    return s_freq == t_freq"],"metadata":{"id":"lqIZQD8e1H3j","executionInfo":{"status":"ok","timestamp":1713993722228,"user_tz":420,"elapsed":23,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["***3. Two Sum (Easy)***\n","\n","https://leetcode.com/problems/two-sum/"],"metadata":{"id":"3r5us5DSHFX7"}},{"cell_type":"code","source":["from typing import List\n","\n","def two_sum(nums: List[int], target: int) -> List[int]:\n","    prev_map = {}  # val: index\n","\n","    for key, value in enumerate(nums):\n","        difference = target - value\n","        if difference in prev_map:\n","            return [prev_map[difference], key]\n","        prev_map[value] = key\n","    return prev_map\n","\n","print(two_sum([1, 3, 5, 7], 10))"],"metadata":{"id":"Di8FBTWtHJWw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713993722229,"user_tz":420,"elapsed":23,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"280dcaa0-8305-48dd-e2dd-41a9d2e87955"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 3]\n"]}]},{"cell_type":"markdown","source":["***4. Group Anagram (Medium)***\n","\n","https://leetcode.com/problems/group-anagrams/"],"metadata":{"id":"C9mSf2F2HKDQ"}},{"cell_type":"code","source":["class Solution:\n","  def group_anagram(self, strs):\n","    anagrams = {}\n","\n","    for word in strs:\n","        sorted_word = ''.join(sorted(word))\n","\n","        if sorted_word in anagrams:\n","            anagrams[sorted_word].append(word)\n","        else:\n","            anagrams[sorted_word] = [word]\n","\n","    return list(anagrams.values())\n","\n","sol = Solution()\n","strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n","print(sol.group_anagram(strs))"],"metadata":{"id":"y0o6o1HBHNHf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713993722229,"user_tz":420,"elapsed":19,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"e78e544a-1ead-4abe-fc79-7d2934d6e0d4"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\n"]}]},{"cell_type":"markdown","source":["***5. Top K Frequent Elements (Medium)***\n","\n","https://leetcode.com/problems/top-k-frequent-elements/"],"metadata":{"id":"M-YCSk6HHOOg"}},{"cell_type":"code","source":["from collections import Counter\n","import heapq\n","\n","def topKFrequent(nums, k):\n","  # Count the frequency of each element\n","  counts = Counter(nums)\n","\n","  # Use a min heap to keep track of the k most frequent elements\n","  heap = []\n","  for num, freq in counts.items():\n","    heapq.heappush(heap, (freq, num))\n","    if len(heap) > k:\n","        heapq.heappop(heap)\n","\n","  # Extract the top k frequent elements from the heap\n","  result = []\n","  while heap:\n","    result.append(heapq.heappop(heap)[1])\n","\n","  # Return the result in any order\n","  return result\n","\n","# Test cases\n","print(topKFrequent([1,1,1,2,2,3], 2))  # Output: [1, 2]\n","print(topKFrequent([1], 1))            # Output: [1]"],"metadata":{"id":"ip_ZSqVZHRGP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713993722229,"user_tz":420,"elapsed":14,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"5d79e246-3188-4c1b-ea2a-3516aec9204b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 1]\n","[1]\n"]}]},{"cell_type":"markdown","source":["***6. Product of Array Except Self (Medium)***\n","\n","https://leetcode.com/problems/product-of-array-except-self/"],"metadata":{"id":"TXC7W1kcHRc4"}},{"cell_type":"code","source":["from typing import List\n","\n","# Prefix, Postfix problem\n","\n","def product_except_self(nums: List[int]) -> List[int]:\n","    res = [1] * (len(nums))\n","\n","    prefix = 1\n","    for i in range(len(nums)):\n","        res[i] = prefix\n","        prefix *= nums[i]\n","    postfix = 1\n","    for i in range(len(nums) - 1, -1, -1):  # counting backward, 4 3 2 1 0\n","        res[i] *= postfix\n","        postfix *= nums[i]\n","    return res\n","\n","print(product_except_self([1, 2, 3, 4]))"],"metadata":{"id":"XQ93cFFKHUXH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713993722563,"user_tz":420,"elapsed":344,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"2d4e9241-2b5f-4b13-ae9e-beb01aff4b3a"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[24, 12, 8, 6]\n"]}]},{"cell_type":"markdown","source":["***7. Valid Sodoku (Medium)***\n","\n","https://leetcode.com/problems/valid-sudoku/"],"metadata":{"id":"c5bI1JcWHUxr"}},{"cell_type":"code","source":["from typing import List\n","import collections\n","\n","class Solution:\n","  def isValidSudoku(self, board: List[List[str]]) -> bool:\n","    cols = collections.defaultdict(set)\n","    # if there is no key, key-value pair will be added itself when you add it\n","    rows = collections.defaultdict(set)\n","    squares = collections.defaultdict(set) # key = (r/3, c/3)\n","\n","    for r in range(9): # 3x3 is already given\n","      for c in range(9):\n","        if board[r][c] == \".\":\n","          continue\n","        if (board[r][c] in rows[r] or # check duplicate in rows\n","            board[r][c] in cols[c] or # check duplicate in cols\n","            board[r][c] in squares[(r // 3, c // 3)]): # check in 3x3 grid\n","          return False\n","        cols[c].add(board[r][c])\n","        rows[r].add(board[r][c])\n","        squares[(r // 3, c // 3)].add(board[r][c])\n","    return True"],"metadata":{"id":"YcFDVqj7HXHS","executionInfo":{"status":"ok","timestamp":1713993722564,"user_tz":420,"elapsed":13,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["***8. Encode and Decode Strings (Medium)***\n","\n","https://leetcode.com/problems/encode-and-decode-strings/\n","\n","https://www.lintcode.com/problem/659/"],"metadata":{"id":"43sIKvUJHXvD"}},{"cell_type":"code","source":["class Solution:\n","  def encode(self, strs):\n","    res = \"\"\n","    for s in strs:\n","      res += str(len(s)) + \"#\" + s\n","    return res\n","\n","  def decode(self, str):\n","    res = []\n","    i = 0\n","\n","    while i < len(str):\n","      j = i\n","      while str[j] != \"#\":\n","        j += 1\n","      length = int(str[i:j])\n","      res.append(str[j + 1: j + 1 + length])\n","      i = j + 1 + length\n","    return res\n","\n","sol = Solution()\n","strs = [\"Soe\", \"Wunna\", \"1996\"]\n","x = sol.encode(strs)\n","print(x)\n","print(sol.decode(x))"],"metadata":{"id":"-f8Hlg0THaeb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713993722564,"user_tz":420,"elapsed":12,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"786a5e46-ebd4-4cc9-8541-be2c4313c4d6"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["3#Soe5#Wunna4#1996\n","['Soe', 'Wunna', '1996']\n"]}]},{"cell_type":"markdown","source":["***9. Longest Consecutive Sequence (Medium)***\n","\n","https://leetcode.com/problems/longest-consecutive-sequence/"],"metadata":{"id":"0OakXo33Ha0z"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def longestConsecutive(self, nums: List[int]) -> int:\n","    numSet = set(nums)\n","    longest = 0\n","\n","    for n in nums:\n","      # Check if it is the start of the sequence\n","      if (n - 1) not in numSet:\n","        length = 0\n","        while (n + length) in numSet:\n","          length += 1\n","        longest = max(length, longest)\n","    return longest"],"metadata":{"id":"Y9SNbB9vHcLC","executionInfo":{"status":"ok","timestamp":1713993722565,"user_tz":420,"elapsed":8,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}}},"execution_count":9,"outputs":[]}]}