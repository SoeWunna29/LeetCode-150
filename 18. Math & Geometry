{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***18. Math & Geometry (8 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Rotate Image (Medium)***\n","\n","https://leetcode.com/problems/rotate-image/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["from typing import List\n","\n","class Solution:\n","  def rotate(self, matrix: List[List[int]]) -> None:\n","    l, r = 0, len(matrix) - 1\n","\n","    while l < r:\n","      for i in range(r - l):\n","        top, bottom = l, r # square matrix\n","\n","        # save the topLeft\n","        topLeft = matrix[top][l + i]\n","\n","        # move bottom left into top left\n","        matrix[top][l + i] = matrix[bottom - i][l]\n","\n","        # move bottom right into bottom left\n","        matrix[bottom - i][l] = matrix[bottom][r - i]\n","\n","        # move top right into bottom right\n","        matrix[bottom][r - i] = matrix[top + i][r]\n","\n","        # move top left into top right\n","        matrix[top + i][r] = topLeft\n","      r -= 1\n","      l += 1"]},{"cell_type":"markdown","source":["***2. Spiral Matrix (Medium)***\n","\n","https://leetcode.com/problems/spiral-matrix/\n"],"metadata":{"id":"hDaosZQ7FuPs"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n","    res = []\n","    left, right = 0, len(matrix[0]) # right is set out of bound for easier code\n","    top, bottom = 0, len(matrix) # same for bottom pointer\n","\n","    while left < right and top < bottom:\n","      # get every i in the top row\n","      for i in range(left, right):\n","        res.append(matrix[top][i])\n","      top += 1\n","\n","      # get every i in the right most col\n","      for i in range(top, bottom):\n","        res.append(matrix[i][right - 1])\n","      right -= 1\n","\n","      if not (left < right and top < bottom):\n","        break\n","\n","      # get every i in the bottom most row\n","      for i in range(right - 1, left - 1, -1): # from right to left/reverse loop\n","        res.append(matrix[bottom - 1][i])\n","      bottom -= 1\n","\n","      # get every i in the left most col\n","      for i in range(bottom - 1, top - 1, -1): # bottom to top/reverse loop\n","        res.append(matrix[i][left])\n","      left += 1\n","\n","    return res"],"metadata":{"id":"DPOR-7lEF9Fg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Set Matrix Zeroes (Medium)***\n","\n","https://leetcode.com/problems/set-matrix-zeroes/\n"],"metadata":{"id":"amSffWLVN0P3"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def setZeroes(self, matrix: List[List[int]]) -> None:\n","    # O(1)\n","    ROWS, COLS = len(matrix), len(matrix[0])\n","    rowZero = False\n","\n","    # Determine which rows/cols need to be zero\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if matrix[r][c] == 0:\n","          matrix[0][c] = 0 # in first row\n","          if r > 0:\n","            matrix[r][0] = 0 # starts after 1st row, in first col\n","          else:\n","            rowZero = True\n","\n","      for r in range(1, ROWS):\n","        for c in range(1, COLS):\n","          if matrix[0][c] == 0 or matrix[r][0] == 0:\n","            matrix[r][c] = 0\n","\n","      if matrix[0][0] == 0:\n","        for r in range(ROWS):\n","          matrix[r][0] = 0\n","\n","      if rowZero:\n","        for c in range(COLS):\n","          matrix[0][c] = 0"],"metadata":{"id":"RTx85ATwN1yv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Happy Number (Easy)***\n","\n","https://leetcode.com/problems/happy-number/"],"metadata":{"id":"AXJLpDGwN2FS"}},{"cell_type":"code","source":["class Solution:\n","  def isHappy(self, n: int) -> bool:\n","    slow, fast = n, self.sumSquareDigits(n)\n","\n","    while slow != fast: # Fast and Slow pointers solution\n","      fast = self.sumSquareDigits(fast) # 2 times\n","      fast = self.sumSquareDigits(fast) # logic -> fast = fast.next.next\n","      slow = self.sumSquareDigits(slow) # logic -> slow = slow.next\n","\n","    return True if fast == 1 else False\n","\n","  def sumSquareDigits(self, n):\n","    output = 0\n","    while n:\n","      output += (n % 10) ** 2 # 19 % 2 = 9\n","      n = n // 10 # 19 // 2 = 1\n","    return output"],"metadata":{"id":"eZtsqaUAN4bU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Solution:\n","  def isHappy(self, n: int) -> bool:\n","    visit = set()\n","    while n not in visit: # when n is in visit, loop is found\n","      visit.add(n)\n","      n = self.sumSquareDigits(n)\n","      if n == 1: # chek before the next iteration\n","        return True\n","    return False\n","\n","  def sumSquareDigits(self, n):\n","    output = 0\n","    while n:\n","      output += (n % 10) ** 2 # 19 % 2 = 9\n","      n = n // 10 # 19 // 2 = 1\n","    return output"],"metadata":{"id":"La81RB3dUoDo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Plus One (Easy)***\n","\n","https://leetcode.com/problems/plus-one/\n"],"metadata":{"id":"aaQM3B0xN4ut"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def plusOne(self, digits: List[int]) -> List[int]:\n","    one = 1 # carry\n","    i = 0 # index\n","    digits = digits[::-1]\n","\n","    while one:\n","      if i < len(digits):\n","        if digits[i] == 9: # 9 + 1 = 10, carry is set to 1, digit is set to 0\n","          digits[i] = 0\n","        else:\n","          digits[i] += 1 # just increase digit\n","          one = 0\n","      else:\n","        digits.append(one) # 999 + 1 becomes 1000\n","        one = 0\n","      i += 1\n","    return digits[::-1]"],"metadata":{"id":"KwQClfgjN6yU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Pow(x, n) (Medium)***\n","\n","https://leetcode.com/problems/powx-n/\n"],"metadata":{"id":"XY-jI_iwN7F7"}},{"cell_type":"code","source":["class Solution:\n","  def myPow(self, x: float, n: int) -> float:\n","    def helper(x, n):\n","      if x == 0: # 0 ** any is 0\n","        return 0\n","      if n == 0: # any ** 0 is 1\n","        return 1\n","\n","      res = helper(x * x, n // 2)\n","      return x * res if n % 2 else res\n","\n","    res = helper(x, abs(n))\n","    return res if n >= 0 else 1 / res # if exponent is negative -> 1 / res"],"metadata":{"id":"EZNQahPZN9Iz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Multiply Strings (Medium)***\n","\n","https://leetcode.com/problems/multiply-strings/\n"],"metadata":{"id":"PE820HhNN9eE"}},{"cell_type":"code","source":["class Solution:\n","  def multiply(self, num1: str, num2: str) -> str:\n","    if \"0\" in [num1, num2]:\n","      return \"0\"\n","\n","    res = [0] * (len(num1) + len(num2)) # 99 * 99 = 9801, can't exceed 4 digits\n","    num1, num2 = num1[::-1], num2[::-1] # reverse the string\n","    for i1 in range(len(num1)):\n","      for i2 in range(len(num2)):\n","        digit = int(num1[i1]) * int(num2[i2])\n","        res[i1 + i2] += digit\n","        res[i1 + i2 + 1] += res[i1 + i2] // 10\n","        res[i1 + i2] = res[i1 + i2] % 10\n","\n","    res, beg = res[::-1], 0\n","    while beg < len(res) and res[beg] == 0: # removing the leading 0\n","      beg += 1 # increasing beginning pointer\n","    # array to string\n","    res = map(str, res[beg:])\n","    return \"\".join(res)"],"metadata":{"id":"tKPBdhvLN-8d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Detect Squares (Medium)***\n","\n","https://leetcode.com/problems/detect-squares/"],"metadata":{"id":"1ACXXTlUN_R0"}},{"cell_type":"code","source":["class DetectSquares:\n","  def __init__(self):\n","    self.ptsCount = defaultdict(int)\n","    self.pts = []\n","\n","  def add(self, point: List[int]) -> None:\n","    self.ptsCount[tuple(point)] += 1 # list can't be key\n","    self.pts.append(point)\n","\n","  def count(self, point: List[int]) -> int:\n","    res = 0\n","    px, py = point\n","    for x, y in self.pts:\n","      # check diagonal distance\n","      if (abs(py - y) != abs(px - x)) or x == px or y == py:\n","        continue\n","      res += self.ptsCount[(x, py)] * self.ptsCount[(px, y)]\n","    return res"],"metadata":{"id":"7_8gSrPTOAZ1"},"execution_count":null,"outputs":[]}]}