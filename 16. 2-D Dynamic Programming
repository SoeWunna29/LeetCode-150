{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***16. 2-D Dynamic Programming (11 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Unique Paths (Medium)***\n","\n","https://leetcode.com/problems/unique-paths/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["class Solution:\n","  def uniquePaths(self, m: int, n: int) -> int:\n","    row = [1] * n\n","\n","    for i in range(m - 1):\n","      newRow = [1] * n\n","      for j in range(n - 2, -1, -1):\n","        newRow[j] = newRow[j + 1] + row[j] # right cell + bottom cell\n","      row = newRow\n","    return row[0]"]},{"cell_type":"markdown","source":["***2. Longest Common Subsequence (Medium)***\n","\n","https://leetcode.com/problems/longest-common-subsequence/\n"],"metadata":{"id":"OEWHyueBEvmT"}},{"cell_type":"code","source":["class Solution:\n","  def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n","    # Building 2d 2DP matrix, one extra col and row\n","    dp = [[0 for j in range(len(text2) + 1)] for i in range(len(text1) + 1)]\n","\n","    for i in range(len(text1) -1, -1, -1): # Bottom up\n","      for j in range(len(text2) -1, -1, -1):\n","        if text1[i] == text2[j]: # if these values are equal\n","          dp[i][j] = 1 + dp[i + 1][j + 1] # [i + 1][j + 1] is diagonal value\n","        else:\n","          dp[i][j] = max(dp[i][j + 1], dp[i + 1][j]) # take max of right and below value\n","\n","    return dp[0][0] # top left contains result"],"metadata":{"id":"T22SlhpEFYXy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Best Time to Buy and Sell Stock with Cooldown (Medium)***\n","\n","https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\n"],"metadata":{"id":"gfUxjHxaNEan"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def maxProfit(self, prices: List[int]) -> int:\n","    # State: Buying or Selling?\n","    # If Buy -> i + 1\n","    # If Sell -> i + 2 , need to skip one cooldown day\n","\n","    dp = {}  # key=(i, buying) val=max_profit\n","\n","    def dfs(i, buying):\n","      if i >= len(prices):\n","        return 0\n","      if (i, buying) in dp:\n","        return dp[(i, buying)]\n","\n","      cooldown = dfs(i + 1, buying)\n","      if buying:\n","        buy = dfs(i + 1, not buying) - prices[i] # need to subtract purchase price\n","        dp[(i, buying)] = max(buy, cooldown)\n","      else:\n","        sell = dfs(i + 2, not buying) + prices[i] # add sold price\n","        dp[(i, buying)] = max(sell, cooldown)\n","      return dp[(i, buying)]\n","\n","    return dfs(0, True)"],"metadata":{"id":"zyVFxHs3NGTI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Coin Change II (Medium)***\n","\n","https://leetcode.com/problems/coin-change-ii/\n"],"metadata":{"id":"ILngKQlDNGoe"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def change(self, amount: int, coins: List[int]) -> int:\n","    # MEMOIZATION\n","    # Time: O(n*m)\n","    # Memory: O(n*m)\n","    cache = {}\n","    def dfs(i, a):\n","      if a == amount:\n","        return 1\n","      if a > amount:\n","        return 0\n","      if i == len(coins):\n","        return 0\n","      if (i, a) in cache:\n","        return cache[(i, a)]\n","\n","      cache[(i, a)] = dfs(i, a + coins[i]) + dfs(i + 1, a)\n","      return cache[(i, a)]\n","\n","    return dfs(0, 0)\n","\n","    # DYNAMIC PROGRAMMING\n","    # Time: O(n*m)\n","    # Memory: O(n*m)\n","    dp = [[0] * (len(coins) + 1) for i in range(amount + 1)]\n","    dp[0] = [1] * (len(coins) + 1)\n","    for a in range(1, amount + 1):\n","      for i in range(len(coins) - 1, -1, -1):\n","        dp[a][i] = dp[a][i + 1]\n","        if a - coins[i] >= 0:\n","          dp[a][i] += dp[a - coins[i]][i]\n","    return dp[amount][0]\n","\n","    # DYNAMIC PROGRAMMING\n","    # Time: O(n*m)\n","    # Memory: O(n) where n = amount\n","    dp = [0] * (amount + 1)\n","    dp[0] = 1\n","    for i in range(len(coins) - 1, -1, -1):\n","      nextDP = [0] * (amount + 1)\n","      nextDP[0] = 1\n","\n","      for a in range(1, amount + 1):\n","        nextDP[a] = dp[a]\n","        if a - coins[i] >= 0:\n","          nextDP[a] += nextDP[a - coins[i]]\n","      dp = nextDP\n","    return dp[amount]"],"metadata":{"id":"aSRn1-zANI1V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Target Sum (Medium)***\n","\n","https://leetcode.com/problems/target-sum/\n"],"metadata":{"id":"J3ZrVQZpNJJT"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def findTargetSumWays(self, nums: List[int], target: int) -> int:\n","    dp = {} # (index, total) -> # of ways\n","\n","    def backtrack(i, total):\n","      if i == len(nums):\n","        return 1 if total == target else 0\n","      if (i, total) in dp:\n","        return dp[(i, total)]\n","\n","      dp[(i, total)] = (backtrack(i + 1, total + nums[i]) +\n","                        backtrack(i + 1, total - nums[i]))\n","      return dp[(i, total)]\n","    return backtrack(0, 0)"],"metadata":{"id":"oBnvzP77NLIW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Interleaving String (Medium)***\n","\n","https://leetcode.com/problems/interleaving-string/\n"],"metadata":{"id":"ZibTpn_xNLc9"}},{"cell_type":"code","source":["class Solution:\n","  def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n","    if len(s1) + len(s2) != len(s3): # check against total length\n","      return False\n","\n","    # Building 2d grid\n","    dp = [[False] * (len(s2) + 1) for i in range(len(s1) + 1)]\n","    dp[len(s1)][len(s2)] = True # initializing conor value as True\n","\n","    for i in range(len(s1), -1, -1): # Bottom up, bottom right to top left\n","      for j in range(len(s2), -1, -1):\n","        if i < len(s1) and s1[i] == s3[i + j] and dp[i + 1][j]:\n","          dp[i][j] = True\n","        if j < len(s2) and s2[j] == s3[i + j] and dp[i][j + 1]:\n","          dp[i][j] = True\n","    return dp[0][0] # result is in top left"],"metadata":{"id":"lTOqaRyENNL8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Longest Increasing Path in a Matrix (Hard)***\n","\n","https://leetcode.com/problems/longest-increasing-path-in-a-matrix/"],"metadata":{"id":"UnxiL4iONO6G"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n","    ROWS, COLS = len(matrix), len(matrix[0])\n","    dp = {}  # (r, c) -> LIP\n","\n","    def dfs(r, c, prevVal):\n","      if r < 0 or r == ROWS or c < 0 or c == COLS or matrix[r][c] <= prevVal:\n","        return 0\n","      if (r, c) in dp:\n","        return dp[(r, c)]\n","\n","      res = 1 # even one cell is considered one path\n","      res = max(res, 1 + dfs(r + 1, c, matrix[r][c]))\n","      res = max(res, 1 + dfs(r - 1, c, matrix[r][c]))\n","      res = max(res, 1 + dfs(r, c + 1, matrix[r][c]))\n","      res = max(res, 1 + dfs(r, c - 1, matrix[r][c]))\n","      dp[(r, c)] = res\n","      return res\n","\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        dfs(r, c, -1)\n","    return max(dp.values())"],"metadata":{"id":"c90qN1CGNREl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Distinct Subsequences (Hard)***\n","\n","https://leetcode.com/problems/distinct-subsequences/\n"],"metadata":{"id":"OwAudncmNRc9"}},{"cell_type":"code","source":["class Solution:\n","  def numDistinct(self, s: str, t: str) -> int:\n","    cache = {}\n","\n","    def dfs(i, j): # position of s and t\n","      if j == len(t):\n","        return 1\n","      if i == len(s):\n","        return 0\n","      if (i, j) in cache:\n","        return cache[(i, j)]\n","\n","      if s[i] == t[j]: # we can decide to chose or not to chose\n","        cache[(i, j)] = dfs(i + 1, j + 1) + dfs(i + 1, j) # next char is also possible\n","      else:\n","        cache[(i, j)] = dfs(i + 1, j)\n","      return cache[(i, j)]\n","\n","    return dfs(0, 0)"],"metadata":{"id":"dH6F99JyNUB6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***9. Edit Distance (Medium)***\n","\n","https://leetcode.com/problems/edit-distance/\n"],"metadata":{"id":"UcSwo2WCNUri"}},{"cell_type":"code","source":["class Solution:\n","  def minDistance(self, word1: str, word2: str) -> int:\n","    # Building 2D grid\n","    dp = [[float(\"inf\")] * (len(word2) + 1) for i in range(len(word1) + 1)]\n","\n","    # Edge cases\n","    for j in range(len(word2) + 1):\n","      dp[len(word1)][j] = len(word2) - j # filling last row\n","    for i in range(len(word1) + 1):\n","      dp[i][len(word2)] = len(word1) - i # filling last col\n","\n","    for i in range(len(word1) - 1, -1, -1): # bottom up\n","      for j in range(len(word2) - 1, -1, -1):\n","        if word1[i] == word2[j]: # if equals, i and j will be moved to next\n","          dp[i][j] = dp[i + 1][j + 1]\n","        else: # delete (i + 1, j), insert (i, j + 1), replace (i + 1, j + 1)\n","          dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j + 1], dp[i + 1][j + 1])\n","    return dp[0][0] # result is in top left"],"metadata":{"id":"tQkDVKD0NWXB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***10. Burst Balloons (Hard)***\n","\n","https://leetcode.com/problems/burst-balloons/\n"],"metadata":{"id":"qVnCis-5NWs7"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def maxCoins(self, nums: List[int]) -> int:\n","    nums = [1] + nums + [1] # as per instruction\n","    dp = {}\n","\n","    def dfs(l, r):\n","      if l > r:\n","        return 0\n","      if (l, r) in dp:\n","        return dp[(l, r)]\n","\n","      dp[(l, r)] = 0\n","      for i in range(l, r + 1): # inclusive of r, *trick -> burst i at last\n","        coins = nums[l - 1] * nums[i] * nums[r + 1]\n","        coins += dfs(l, i - 1) + dfs(i + 1, r) # left and right portions of i\n","        dp[(l, r)] = max(dp[(l, r)], coins)\n","      return dp[(l, r)]\n","    return dfs(1, len(nums) - 2) # exclude [1] from start and end"],"metadata":{"id":"4vO-axLANYVR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***11. Regular Expression Matching (Hard)***\n","\n","https://leetcode.com/problems/regular-expression-matching/"],"metadata":{"id":"rYEcXUyKNYta"}},{"cell_type":"code","source":["# BOTTOM-UP Dynamic Programming\n","class Solution:\n","  def isMatch(self, s: str, p: str) -> bool:\n","    cache = [[False] * (len(p) + 1) for i in range(len(s) + 1)]\n","    cache[len(s)][len(p)] = True\n","\n","    for i in range(len(s), -1, -1):\n","      for j in range(len(p) - 1, -1, -1):\n","        match = i < len(s) and (s[i] == p[j] or p[j] == \".\")\n","\n","        if (j + 1) < len(p) and p[j + 1] == \"*\":\n","          cache[i][j] = cache[i][j + 2]\n","          if match:\n","            cache[i][j] = cache[i + 1][j] or cache[i][j]\n","        elif match:\n","          cache[i][j] = cache[i + 1][j + 1]\n","\n","    return cache[0][0]"],"metadata":{"id":"_hpW29MHNZYh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# TOP DOWN MEMOIZATION\n","class Solution:\n","  def isMatch(self, s: str, p: str) -> bool:\n","    cache = {}\n","\n","    def dfs(i, j):\n","      if (i, j) in cache:\n","        return cache[(i, j)]\n","      if i >= len(s) and j >= len(p):\n","        return True\n","      if j >= len(p):\n","        return False\n","\n","      match = i < len(s) and (s[i] == p[j] or p[j] == \".\")\n","      if (j + 1) < len(p) and p[j + 1] == \"*\":\n","        cache[(i, j)] = dfs(i, j + 2) or (  # dont use *\n","          match and dfs(i + 1, j)\n","        )  # use *\n","        return cache[(i, j)]\n","      if match:\n","        cache[(i, j)] = dfs(i + 1, j + 1)\n","        return cache[(i, j)]\n","      cache[(i, j)] = False\n","      return False\n","\n","    return dfs(0, 0)"],"metadata":{"id":"yWKIHgWONRuq"},"execution_count":null,"outputs":[]}]}