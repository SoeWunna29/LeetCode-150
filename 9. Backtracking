{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***9. Backtracking (9 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Subsets (Medium)***\n","\n","https://leetcode.com/problems/subsets/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["from typing import List\n","\n","class Solution:\n","  def subsets(self, nums: List[int]) -> List[List[int]]:\n","    res = []\n","\n","    subset = []\n","    def dfs(i): # i is the index here\n","      if i >= len(nums):\n","        res.append(subset.copy())\n","        return\n","\n","      # decision to include nums[i]\n","      subset.append(nums[i])\n","      dfs(i + 1)\n","\n","      # decision NOT to include nums[i]\n","      subset.pop()\n","      dfs(i + 1)\n","\n","    dfs(0)\n","    return res"]},{"cell_type":"markdown","source":["***2. Combination Sum (Medium)***\n","\n","https://leetcode.com/problems/combination-sum/\n"],"metadata":{"id":"zOkQcVaN5CR9"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n","    res = []\n","\n","    def dfs(i, cur, total):\n","      if total == target:\n","        res.append(cur.copy())\n","        return\n","      if i >= len(candidates) or total > target:\n","        return\n","\n","      cur.append(candidates[i])\n","      dfs(i, cur, total + candidates[i]) # include i\n","      cur.pop() # cleaning before going down to other decision\n","      dfs(i + 1, cur, total) # not include i\n","\n","    dfs(0, [], 0)\n","    return res"],"metadata":{"id":"xWZ3PVVS5cVp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Permutation (Medium)***\n","\n","https://leetcode.com/problems/permutations/"],"metadata":{"id":"Su0hVkSbKOSN"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def permute(self, nums: List[int]) -> List[List[int]]:\n","    result = []\n","\n","    # base case\n","    if (len(nums) == 1):\n","      return [nums.copy()] # nums[:] can also be used\n","\n","    for i in range(len(nums)):\n","      n = nums.pop(0)\n","      perms = self.permute(nums)\n","\n","      for perm in perms:\n","        perm.append(n)\n","      result.extend(perms)\n","      nums.append(n)\n","\n","    return result"],"metadata":{"id":"6yYBknRpKQii"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Subsets II (Medium)***\n","\n","https://leetcode.com/problems/subsets-ii/"],"metadata":{"id":"fvamKur4KQ9c"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n","    res = []\n","    nums.sort()\n","\n","    def backtrack(i, subset):\n","      if i == len(nums):\n","        res.append(subset[::]) # subset.copy()\n","        return\n","\n","      # All subsets that include nums[i]\n","      subset.append(nums[i])\n","      backtrack(i + 1, subset)\n","      subset.pop()\n","\n","      # All subsets that don't include nums[i]\n","      # Duplicates will be next to each other since array is sorted\n","      while i + 1 < len(nums) and nums[i] == nums[i + 1]:\n","        i += 1\n","      backtrack(i + 1, subset)\n","\n","    backtrack(0, [])\n","    return res"],"metadata":{"id":"d_hoRh3GKVSO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Combination Sum II (Medium)***\n","\n","https://leetcode.com/problems/combination-sum-ii/"],"metadata":{"id":"_JKYZir5KWzO"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n","    candidates.sort() # to make skipping duplicates easy\n","    res = []\n","\n","    def backtrack(cur, pos, target):\n","      if target == 0: # we found the combination\n","        res.append(cur.copy()) # cur is just reference, add copy() of it\n","        return\n","      if target <= 0:\n","        return\n","\n","      prev = -1 # default value\n","      for i in range(pos, len(candidates)): # starting pos to end of candidates\n","        if candidates[i] == prev: # is equal to current candidate, skip\n","          continue\n","        cur.append(candidates[i]) # prework before calling recursive func\n","        backtrack(cur, i + 1, target - candidates[i])\n","        cur.pop()\n","        prev = candidates[i]\n","\n","    backtrack([], 0, target)\n","    return res"],"metadata":{"id":"gh1OGbzcKZxt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Word Search (Medium)***\n","\n","https://leetcode.com/problems/word-search/"],"metadata":{"id":"UiizNKslKaHN"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def exist(self, board: List[List[str]], word: str) -> bool:\n","    ROWS, COLS = len(board), len(board[0])\n","    path = set()\n","\n","    def dfs(r, c, i):\n","      if i == len(word):\n","        return True\n","      if (r < 0 or c < 0 or\n","          r >= ROWS or c >= COLS or\n","          word[i] != board[r][c] or\n","          (r, c) in path):\n","          return False\n","\n","      path.add((r, c))\n","      res = (dfs(r + 1, c, i + 1) or\n","             dfs(r - 1, c, i + 1) or\n","             dfs(r, c + 1, i + 1) or\n","             dfs(r, c - 1, i + 1))\n","      path.remove((r, c))\n","      return res\n","\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if dfs(r, c, 0):\n","          return True\n","    return False"],"metadata":{"id":"xDLbSPoBKcDk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Palindrome Partitioning (Medium)***\n","\n","https://leetcode.com/problems/palindrome-partitioning/\n"],"metadata":{"id":"VGK29R5BKcg9"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def partition(self, s: str) -> List[List[str]]:\n","    res, part = [], []\n","\n","    def dfs(i): # index\n","      if i >= len(s): # reached the end of the string\n","        res.append(part.copy())\n","        return\n","      for j in range(i, len(s)):\n","        if self.isPali(s, i, j):\n","            part.append(s[i:j+1])\n","            dfs(j + 1)\n","            part.pop()\n","\n","    dfs(0) # start from first index\n","    return res\n","\n","  def isPali(self, s, l, r):\n","    while l < r:\n","      if s[l] != s[r]:\n","        return False\n","      l, r = l + 1, r - 1\n","    return True"],"metadata":{"id":"pxFp2cuoKeVE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Letter Combinations of a Phone Number (Medium)***\n","\n","https://leetcode.com/problems/letter-combinations-of-a-phone-number/"],"metadata":{"id":"tCv77jHjKe1V"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","    def letterCombinations(self, digits: str) -> List[str]:\n","      res = []\n","      digitToChar = {\n","          \"2\": \"abc\",\n","          \"3\": \"def\",\n","          \"4\": \"ghi\",\n","          \"5\": \"jkl\",\n","          \"6\": \"mno\",\n","          \"7\": \"qprs\",\n","          \"8\": \"tuv\",\n","          \"9\": \"wxyz\",\n","      }\n","\n","      def backtrack(i, curStr):\n","        if len(curStr) == len(digits): # i >= len(digits), base case\n","          res.append(curStr)\n","          return\n","        for c in digitToChar[digits[i]]:\n","          backtrack(i + 1, curStr + c) # eg: i -> \"23\", curStr = \"ad\"\n","\n","      if digits: # edge case\n","        backtrack(0, \"\")\n","\n","      return res"],"metadata":{"id":"xEos3A86Kg_k"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***9. N Queens (Hard)***\n","\n","https://leetcode.com/problems/n-queens/"],"metadata":{"id":"pRFjQl5RKhjF"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def solveNQueens(self, n: int) -> List[List[str]]:\n","    col = set()\n","    posDiag = set() # (r + c) positive diagonal\n","    negDiag = set() # (r - c) negative diagonal\n","\n","    res = []\n","    board = [[\".\"] * n for i in range(n)]\n","\n","    def backtrack(r):\n","      if r == n: # base case\n","        copy = [\"\".join(row) for row in board]\n","        res.append(copy)\n","        return\n","\n","      for c in range(n):\n","        if c in col or (r + c) in posDiag or (r - c) in negDiag:\n","          continue\n","\n","        col.add(c)\n","        posDiag.add(r + c)\n","        negDiag.add(r - c)\n","        board[r][c] = \"Q\"\n","\n","        backtrack(r + 1)\n","\n","        col.remove(c)\n","        posDiag.remove(r + c)\n","        negDiag.remove(r - c)\n","        board[r][c] = \".\"\n","\n","    backtrack(0)\n","    return res"],"metadata":{"id":"yzgQk_6wKi90","executionInfo":{"status":"ok","timestamp":1714250937579,"user_tz":420,"elapsed":19,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":1,"outputs":[]}]}