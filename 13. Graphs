{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***13. Graphs (13 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Number of Islands (Medium)***\n","\n","https://leetcode.com/problems/number-of-islands/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["class Solution:\n","  def numOfIsland(self, grid):\n","    if not grid:\n","      return 0\n","\n","    rows, cols = len(grid), len(grid[0])\n","    visit = set()\n","    islands = 0\n","\n","    def bfs(r, c):\n","      q = collections.deque()\n","      visit.add((r, c))\n","      q.append((r, c))\n","      while q:\n","        row, col = q.popleft() # *** if pop() here, it's iterative DFS\n","        directions = [[1, 0], [-1, 0], [0, 1], [0, -1]] # down, up, right, left\n","        for dr, dc in directions:\n","          r, c = row + dr, col + dc\n","          if (r in range(rows) and\n","              c in range(cols) and\n","              grid[r][c] == \"1\" and\n","              (r, c) not in visit):\n","              q. append(r, c)\n","              visit.add(r, c)\n","\n","    for r in range(rows):\n","      for c in range(cols):\n","        if grid[r][c] == \"1\" and (r, c) not in visit:\n","          bfs(r, c)\n","          islands += 1\n","\n","    return islands"]},{"cell_type":"markdown","source":["***2. Max Area of Island (Medium)***\n","\n","https://leetcode.com/problems/max-area-of-island/"],"metadata":{"id":"YOuIrrJ5ebty"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n","    ROWS, COLS = len(grid), len(grid[0])\n","    visit = set()\n","\n","    def dfs(r, c):\n","      if (r < 0 or c < 0 or r == ROWS or c == COLS or\n","          grid[r][c] == 0 or (r, c) in visit):\n","        return 0\n","      visit.add(r,c)\n","      return (1 + dfs(r + 1, c) +\n","                  dfs(r - 1, c) +\n","                  dfs(r, c + 1) +\n","                  dfs(r, c - 1)) # 1 is current cell + right + left + up + down\n","\n","    area = 0\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        area = max(area, dfs(r, c))\n","    return area"],"metadata":{"id":"wufzHV55egYD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Clone Graph (Medium)***\n","\n","https://leetcode.com/problems/clone-graph/\n"],"metadata":{"id":"L65G1kE-6rIl"}},{"cell_type":"code","source":["class Node:\n","  def __init__(self, val = 0, neighbors = None):\n","    self.val = val\n","    self.neighbors = neighbors if neighbors is not None else []\n","\n","class Solution:\n","  def CloneGraph(self, node: Node) -> Node:\n","    oldToNew = {}\n","\n","    def dfs(node):\n","      if node in oldToNew:\n","        return oldToNew[node]\n","\n","      copy = Node(node.val)\n","      oldToNew[node] = copy\n","      for nei in node.neighbors:\n","        copy.neighbors.append(dfs(nei))\n","      return copy\n","\n","    return dfs(node) if node else None"],"metadata":{"id":"KlZfnx4W7IHY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Walls and Gates (Medium)***\n","\n","https://leetcode.com/problems/walls-and-gates/\n","\n","https://www.lintcode.com/problem/663/\n"],"metadata":{"id":"vefaj_0Mev3F"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def walls_and_gates(self, rooms: List[List[int]]):\n","    ROWS, COLS = len(rooms), len(rooms[0])\n","    visit = set()\n","    q = deque()\n","\n","    def addRoom(r, c):\n","      if (r < 0 or r == ROWS or c < 0 or c == COLS or\n","          (r, c) in visit or rooms[r][c] == -1):\n","        return\n","      visit.add((r, c))\n","      q.append([r, c])\n","\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if rooms[r][c] == 0:\n","          q.append([r, c])\n","          visit.add((r, c))\n","\n","    dist = 0 # starting distance from gate is zero\n","    while q:\n","      for i in range(len(q)):\n","        r, c = q.popleft()\n","        rooms[r][c] = dist\n","        addRoom(r + 1, c)\n","        addRoom(r - 1, c)\n","        addRoom(r, c + 1)\n","        addRoom(r, c - 1)\n","      dist += 1 # after the loop ends, dist is increased by 1"],"metadata":{"id":"W98skJqWezNh","executionInfo":{"status":"ok","timestamp":1713633909204,"user_tz":420,"elapsed":18,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["***5. Rotting Oranges (Medium)***\n","\n","https://leetcode.com/problems/rotting-oranges/\n"],"metadata":{"id":"2Wu7kJPOezuc"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def orangesRotting(self, grid: List[List[int]]) -> int:\n","    q = deque()\n","    time, fresh = 0, 0\n","\n","    ROWS, COLS = len(grid), len(grid[0])\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if grid[r][c] == 1:\n","          fresh += 1 # counting total fresh orange\n","        if grid[r][c] == 2:\n","          q.append([r, c]) # rotten orange added to queue\n","\n","    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n","    while q and fresh > 0:\n","      for i in range(len(q)):\n","        r, c = q.popleft()\n","        for dr, dc in directions:\n","          row, col = dr + r, dc + c\n","          # if in bounds and fresh, make rotten\n","          if (row < 0 or row == ROWS or col < 0 or col == COLS or\n","              grid[row][col] != 1):\n","            continue\n","          grid[row][col] = 2\n","          q.append([row, col])\n","          fresh -= 1\n","      time += 1\n","    return time if fresh == 0 else -1"],"metadata":{"id":"rdOQ1_bAe4Bk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Pacific Atlantic Waterflow (Medium)***\n","\n","https://leetcode.com/problems/pacific-atlantic-water-flow/\n"],"metadata":{"id":"TV3343vDLqJK"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n","    ROWS, COLS = len(heights), len(heights[0])\n","    pac, atl = set(), set()\n","\n","    def dfs(r, c, visit, prevHeight):\n","      if ((r, c) in visit or\n","          r < 0 or c < 0 or r == ROWS or c == COLS or\n","          heights[r][c] < prevHeight):\n","        return\n","\n","      visit.add((r, c))\n","      dfs(r + 1, c, visit, heights[r][c])\n","      dfs(r - 1, c, visit, heights[r][c])\n","      dfs(r, c + 1, visit, heights[r][c])\n","      dfs(r, c - 1, visit, heights[r][c])\n","\n","    for c in range(COLS): # every position in row\n","      dfs(0, c, pac, heights[0][c]) # 1st row\n","      dfs(ROWS - 1, c, atl, heights[ROWS - 1][c]) # last row\n","\n","    for r in range(ROWS): # every position in col\n","      dfs(r, 0, pac, heights[r][0]) # 1st col\n","      dfs(r, COLS - 1, atl, heights[r][COLS - 1]) # last col\n","\n","    res = []\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if (r, c) in pac and (r, c) in atl:\n","          res.append([r, c])\n","    return res"],"metadata":{"id":"1mcS-R_6Lr8d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Surrounded Regions (Medium)***\n","\n","https://leetcode.com/problems/surrounded-regions/\n"],"metadata":{"id":"Eu8XGs7oLsUW"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def solve(self, board: List[List[str]]) -> None:\n","    ROWS, COLS = len(board), len(board[0])\n","\n","    def capture(r, c):\n","      if (r < 0 or c < 0 or r == ROWS or c == COLS\n","          or board[r][c] != \"O\"):\n","        return\n","      board[r][c] = \"T\"\n","      capture(r + 1, c)\n","      capture(r - 1, c)\n","      capture(r, c + 1)\n","      capture(r, c - 1)\n","\n","    # 1. (DFS) Capture unsurrounded regions (O -> T)\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if (board[r][c] == \"O\" and\n","            (r in [0, ROWS - 1] or c in [0, COLS - 1])): # in first or last?\n","          capture(r, c)\n","\n","    # 2. Capture surrounded regions (O -> X)\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if board[r][c] == \"O\":\n","          board[r][c] = \"X\"\n","\n","    # 3. Uncapture unsurrounded region (T -> O)\n","    for r in range(ROWS):\n","      for c in range(COLS):\n","        if board[r][c] == \"T\":\n","          board[r][c] = \"O\""],"metadata":{"id":"oP32HC2WLuXV","executionInfo":{"status":"ok","timestamp":1713635979286,"user_tz":420,"elapsed":22,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["***8. Course Schedule (Medium)***\n","\n","https://leetcode.com/problems/course-schedule/"],"metadata":{"id":"DtuyOROpLzyV"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n","    # map each course to prereq list\n","    preMap = { i:[] for i in range(numCourses)}\n","    for crs, pre in prerequisites:\n","      preMap[crs].append(pre)\n","\n","    # visitSet = all courses along the curr DFS path\n","    visitSet = set()\n","    def dfs(crs):\n","      if crs in visitSet:\n","        return False\n","      if preMap[crs] == []:\n","        return True\n","\n","      visitSet.add(crs)\n","      for pre in preMap[crs]:\n","        if not dfs(pre):\n","          return False\n","      visitSet.remove(crs)\n","      preMap[crs] = []\n","      return True\n","\n","    for crs in range(numCourses):\n","      if not dfs(crs):\n","        return False\n","    return True"],"metadata":{"id":"XvZFkfVLL16V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***9. Course Schedule II (Medium)***\n","\n","https://leetcode.com/problems/course-schedule-ii/"],"metadata":{"id":"LpGWqKDGL2bU"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n","    prereq = {c:[] for c in range(numCourses)}\n","    for crs, pre in prerequisites: # building hashmap course -> prerequisites\n","      prereq[crs].append(pre)\n","\n","    output = []\n","    visit, cycle = set(), set() # cycle is to detect loop\n","    def dfs(crs):\n","      if crs in cycle:\n","        return False\n","      if crs in visit: # this course can be taken\n","        return True\n","\n","      cycle.add(crs)\n","      for pre in prereq[crs]: # loop through all prerequisites\n","        if dfs(pre) == False:\n","          return False\n","      cycle.remove(crs) # at this point, this course can be taken\n","      visit.add(crs)\n","      output.append(crs)\n","      return True\n","\n","    for c in range(numCourses):\n","      if dfs(c) == False: # all courses must be taken or False\n","        return []\n","    return output\n","\n","# Topological Sort"],"metadata":{"id":"-N61UzWUL-kt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***10. Graph Valid Tree (Medium)***\n","\n","https://leetcode.com/problems/graph-valid-tree/\n","\n","https://www.lintcode.com/problem/178/"],"metadata":{"id":"WcFM3lR-fB5y"}},{"cell_type":"code","source":["class Solution:\n","  def validTree(self, n, edges):\n","    if not n:\n","      return True\n","\n","    adj = { i:[] for i in range(n) }\n","    for n1, n2 in edges:\n","      adj[n1].append(n2)\n","      adj[n2].append(n1)\n","\n","    visit = set()\n","\n","    def dfs(i, prev):\n","      if i in visit: # loop detected\n","        return False\n","\n","      visit.add(i)\n","      for j in adj[i]: # visiting the neighbors\n","        if j == prev: # to keep track prev node to prevent false loop detection\n","          continue\n","        if not dfs(j, i):\n","          return False\n","      return True\n","\n","    return dfs(0, -1) and n == len(visit)"],"metadata":{"id":"eTFz6HXQfCql"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***11. Number of Connected Components in an Undirected Graph (Medium)***\n","\n","https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/\n","\n","https://www.lintcode.com/problem/3651/"],"metadata":{"id":"E0fAsjw7L-_F"}},{"cell_type":"code","source":["# Union Find\n","from typing import List\n","\n","class Solution:\n","  def countComponents(self, n: int, edges: List[List[int]]) -> int:\n","    par = [i for i in range(n)]\n","    rank = [1] * n\n","\n","    def find(n1):\n","      res = n1\n","\n","      while res != par[res]:\n","        par[res] = par[par[res]]\n","        res = par[res]\n","      return res\n","\n","    def union(n1, n2):\n","      p1, p2 = find(n1), find(n2)\n","\n","      if p1 == p2:\n","        return 0\n","\n","      if rank[p2] > rank[p1]:\n","        par[p1] = p2\n","        rank[p2] += rank[p1]\n","      else:\n","        par[p2] = p1\n","        rank[p1] += rank[p2]\n","      return 1\n","\n","    res = n\n","    for n1, n2 in edges:\n","      res -= union(n1, n2)\n","    return res"],"metadata":{"id":"Imi6B21aMGLt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***12. Redundant Connections (Medium)***\n","\n","https://leetcode.com/problems/redundant-connection/"],"metadata":{"id":"ykhIPU9DMGiV"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n","    par = [i for i in range(len(edges) + 1)] # 0 1 2... start from zero to make math easy\n","    rank = [1] * (len(edges) + 1) # since 0 is added as an extra\n","\n","    def find(n):\n","      p = par[n]\n","      while p != par[p]:\n","        par[p] = par[par[p]]\n","        p = par[p]\n","      return p\n","\n","    # return False if can't complete\n","    def union(n1, n2):\n","      p1, p2 = find(n1), find(n2)\n","\n","      if p1 == p2: # redundant connection is found\n","        return False\n","\n","      if rank[p1] > rank[p2]:\n","        par[p2] = p1\n","        rank[p1] += rank[p2]\n","      else:\n","        par[p1] = p2\n","        rank[p2] += rank[p1]\n","      return True\n","\n","    for n1, n2 in edges:\n","      if not union(n1, n2):\n","        return [n1, n2]"],"metadata":{"id":"ANLsh0fYMJ0V","executionInfo":{"status":"ok","timestamp":1713638456849,"user_tz":420,"elapsed":329,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["***13. Word Ladder (Hard)***\n","\n","https://leetcode.com/problems/word-ladder/"],"metadata":{"id":"BL6FUQfUMNzt"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n","    if endWord not in wordList:\n","      return 0\n","\n","    nei = collections.defaultdict(list)\n","    wordList.append(beginWord)\n","    for word in wordList:\n","      for j in range(len(word)): # transform each word in wildcard\n","        pattern = word[:j] + \"*\" + word[j + 1:] # hot -> *ot, h*t, ho*\n","        nei[pattern].append(word)\n","\n","    visit = set([beginWord])\n","    q = deque([beginWord])\n","    res = 1\n","    while q:\n","      for i in range(len(q)):\n","        word = q.popleft()\n","        if word == endWord:\n","          return res\n","        for j in range(len(word)):\n","          pattern = word[:j] + \"*\" + word[j + 1:]\n","          for neiWord in nei[pattern]:\n","            if neiWord not in visit:\n","              visit.add(neiWord)\n","              q.append(neiWord)\n","      res += 1\n","    return 0"],"metadata":{"id":"V2aP8OvaMQWd","executionInfo":{"status":"ok","timestamp":1713642313456,"user_tz":420,"elapsed":323,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":5,"outputs":[]}]}