{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***6. Linked List (11 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Reverse Linked List (Easy)***\n","\n","https://leetcode.com/problems/reverse-linked-list/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["# Definition for singly-linked list.\n","class ListNode(object):\n","    def __init__(self, val=0, next=None):\n","        self.val = val\n","        self.next = next\n","\n","class Solution(object):\n","    def reverseList(self, head: ListNode) -> ListNode:\n","        \"\"\"\n","        :type head: ListNode\n","        :rtype: ListNode\n","        \"\"\"\n","        previous = None\n","        current = head\n","\n","        while current:\n","          nxt = current.next\n","          current.next = previous\n","          previous = current\n","          current = nxt\n","        return previous"]},{"cell_type":"markdown","source":["***2. Merge Two Sorted Lists (Easy)***\n","\n","https://leetcode.com/problems/merge-two-sorted-lists/\n"],"metadata":{"id":"CynaYkJP3MhR"}},{"cell_type":"code","source":["# Definition for singly-linked list.\n","class ListNode(object):\n","    def __init__(self, val=0, next=None):\n","        self.val = val\n","        self.next = next\n","\n","class Solution(object):\n","    def mergeTwoLists(self, list1: ListNode, list2: ListNode) -> ListNode:\n","        \"\"\"\n","        :type list1: Optional[ListNode]\n","        :type list2: Optional[ListNode]\n","        :rtype: Optional[ListNode]\n","        \"\"\"\n","        dummy = ListNode()\n","        tail = dummy\n","\n","        while l1 and l2:\n","          if l1.val < l2.val:\n","            tail.next = l1\n","            l1 = l1.next\n","          else:\n","            tail.next = l2\n","            l2 = l2.next\n","          tail = tail.next\n","\n","        if l1:\n","          tail.next = l1\n","        elif l2:\n","          tail.next = l2\n","\n","        return dummy.next"],"metadata":{"id":"kthaSo4k3tYZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Reorder List (Medium)***\n","\n","https://leetcode.com/problems/reorder-list/\n"],"metadata":{"id":"P6Ux0TvMI20j"}},{"cell_type":"code","source":["# Definition for singly-linked list.\n","class ListNode(object):\n","    def __init__(self, val=0, next=None):\n","        self.val = val\n","        self.next = next\n","\n","class Solution(object):\n","    def reorderList(self, head):\n","        \"\"\"\n","        :type head: ListNode\n","        :rtype: None Do not return anything, modify head in-place instead.\n","        \"\"\"\n","        # Find middle\n","        slow, fast = head, head.next\n","        while fast and fast.next:\n","          slow = slow.next\n","          fast = fast.next.next\n","\n","        # Reverse second half\n","        second = slow.next\n","        prev = slow.next = None\n","        while second:\n","          tmp = second.next\n","          second.next = prev\n","          prev = second\n","          second = temp\n","\n","        # Merge Two halfs\n","        first, second = head, prev\n","        while second:\n","          tmp1, tmp2 = first.next, second.next\n","          first.next = second\n","          second.next = tmp1\n","          first, second = tmp1, tmp2"],"metadata":{"id":"OVv1bJRMI4x5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Remove Nth Node from End of List (Medium)***\n","\n","https://leetcode.com/problems/remove-nth-node-from-end-of-list/"],"metadata":{"id":"4tVfIk6RI5Nz"}},{"cell_type":"code","source":["# Definition for singly-linked list.\n","class ListNode(object):\n","    def __init__(self, val=0, next=None):\n","        self.val = val\n","        self.next = next\n","\n","class Solution(object):\n","    def removeNthFromEnd(self, head, n):\n","        \"\"\"\n","        :type head: ListNode\n","        :type n: int\n","        :rtype: ListNode\n","        \"\"\"\n","        dummy = ListNode(0, head)\n","        left = dummy\n","        right = head\n","\n","        while n > 0 and right:\n","          right = right.next\n","          n -= 1\n","\n","        while right:\n","          left = left.next\n","          right = right.next\n","\n","        left.next = left.next.next\n","        return dummy.next"],"metadata":{"id":"0G8sWlbmI7xC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Copy List with Random Pointer (Medium)***\n","\n","https://leetcode.com/problems/copy-list-with-random-pointer/"],"metadata":{"id":"QpcG04UqI8HA"}},{"cell_type":"code","source":["class Node:\n","  def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n","    self.val = int(x)\n","    self.next = next\n","    self.random = random\n","\n","class Solution:\n","  def copyRandomList(self, head: Node) -> Node:\n","    oldToCopy = { None: None } # edge case\n","\n","    # Two passes\n","    # 1st pass - create copy nodes and store in hash map\n","    cur = head\n","    while cur:\n","      copy = Node(cur.val)\n","      oldToCopy[cur] = copy\n","      cur = cur.next\n","\n","    # 2nd pass - set the pointers\n","    cur = head\n","    while cur:\n","      copy = oldToCopy[cur]\n","      copy.next = oldToCopy[cur.next] # edge case, cur.next could be None\n","      copy.random = oldToCopy[cur.random]\n","      cur = cur.next\n","\n","    return oldToCopy[head]"],"metadata":{"id":"13HiDhfkI966"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Add Two Numbers (Medium)***\n","\n","https://leetcode.com/problems/add-two-numbers/\n"],"metadata":{"id":"h7f0U33_I-TL"}},{"cell_type":"code","source":["class ListNode:\n","  def __init__(self, val=0, next=None):\n","    self.val = val\n","    self.next = next\n","\n","class Solution:\n","  def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n","    dummy = ListNode()\n","    cur = dummy\n","\n","    carry = 0\n","    while l1 or l2 or carry:\n","      v1 = l1.val if l1 else 0\n","      v2 = l2.val if l2 else 0\n","\n","      # new digit\n","      val = v1 + v2 + carry\n","      carry = val // 10\n","      val = val % 10 # % is remainder\n","      cur.next = ListNode(val)\n","\n","      # update ptrs\n","      cur = cur.next\n","      l1 = l1.next if l1 else None\n","      l2 = l2.next if l2 else None\n","\n","    return dummy.next"],"metadata":{"id":"YCb99TQ1I__K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class ListNode:\n","    def __init__(self, val=0, next=None):\n","        self.val = val\n","        self.next = next\n","\n","class Solution:\n","    def addTwoNumbers(self, l1, l2):\n","        res1, res2 = \"\", \"\"\n","        while l1:\n","            res1 += str(l1.val)\n","            l1 = l1.next\n","\n","        while l2:\n","            res2 += str(l2.val)\n","            l2 = l2.next\n","\n","        total = int(res1[::-1]) + int(res2[::-1])  # Reverse the strings to get the correct order\n","        total = str(total)[::-1]  # Reverse the result to get the correct order\n","\n","        # Initialize the dummy node\n","        dummy = ListNode()\n","        current = dummy\n","\n","        # Iterate over each digit in the total and create a new node\n","        for n in total:\n","            new_node = ListNode(int(n))\n","            current.next = new_node\n","            current = new_node  # Move the current pointer to the new node\n","\n","        return dummy.next  # Return the next node of the dummy as it is the head of the result list"],"metadata":{"id":"4Hz5xuJfT_-f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Linked List Cycle (Easy)***\n","\n","https://leetcode.com/problems/linked-list-cycle/\n"],"metadata":{"id":"CyQPoCbGJAXK"}},{"cell_type":"code","source":["# Definition for singly-linked list.\n","class ListNode(object):\n","    def __init__(self, x):\n","        self.val = x\n","        self.next = None\n","\n","class Solution(object):\n","    def hasCycle(self, head: ListNode) -> ListNode:\n","        \"\"\"\n","        :type head: ListNode\n","        :rtype: bool\n","        \"\"\"\n","        slow, fast = head, head\n","\n","        while fast and fast.next:\n","          slow = slow.next\n","          fast = fast.next.next\n","          if slow == fast:\n","            return True\n","        return False"],"metadata":{"id":"2gsJ8-ILJCGC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***8. Find the Duplicate Number (Medium)***\n","\n","https://leetcode.com/problems/find-the-duplicate-number/"],"metadata":{"id":"RayWdVjbJCcS"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","    def findDuplicate(self, nums: List[int]) -> int:\n","        slow, fast = 0, 0\n","        while True:\n","            slow = nums[slow]\n","            fast = nums[nums[fast]]\n","            if slow == fast:\n","                break\n","\n","        slow2 = 0\n","        while True:\n","            slow = nums[slow]\n","            slow2 = nums[slow2]\n","            if slow == slow2:\n","                return slow"],"metadata":{"id":"eni7-Z0hJEWa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections import Counter\n","from typing import List\n","\n","class Solution:\n","    def findDuplicate(self, nums: List[int]) -> int:\n","        counts = Counter(nums)\n","\n","        for num in counts:\n","            if counts[num] > 1:\n","                return num"],"metadata":{"id":"HfGG3N25WMsh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***9. LRU Cache (Medium)***\n","\n","https://leetcode.com/problems/lru-cache/\n"],"metadata":{"id":"C-Ixw_I1JEwK"}},{"cell_type":"code","source":["class Node:\n","  def __init__(self, key, val):\n","    self.key, self.val = key, val\n","    self.prev = self.next = None\n","\n","class LRUCache:\n","  def __init__(self, capacity: int):\n","    self.cap = capacity\n","    self.cache = {} # map key to node\n","\n","    # Left = LRU, right = most recent\n","    self.left, self.right = Node(0, 0), Node(0, 0)\n","    # connect these nodes/ left -> <- right\n","    self.left.next, self.right.prev = self.right, self.left\n","    # new node will be added between them\n","\n","  # Remove node from list\n","  def remove(self, node):\n","    prev, nxt = node.prev, node.next\n","    prev.next, nxt.prev = nxt, prev\n","\n","  # Insert node at right\n","  def insert(self, node):\n","    prev, nxt = self.right.prev, self.right\n","    prev.next = nxt.prev = node\n","    node.next, node.prev = nxt, prev\n","\n","  def get(self, key: int) -> int:\n","    if key in self.cache:\n","      self.remove(self.cache[key])\n","      self.insert(self.cache[key])\n","      return self.cache[key].val\n","    return -1\n","\n","  def put(self, key: int, value: int) -> None:\n","    if key in self.cache:\n","      self.remove(self.cache[key])\n","      del self.cache[key]  # Remove the node from the cache\n","    self.cache[key] = Node(key, value)\n","    self.insert(self.cache[key])\n","\n","    if len(self.cache) > self.cap:\n","      # remove from the list and delete the LRU from the hashmap\n","      lru = self.left.next\n","      self.remove(lru)\n","      del self.cache[lru.key]  # Remove the LRU node from the cache"],"metadata":{"id":"SWv5KG3iYgNx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***10. Merge K Sorted Lists (Hard)***\n","\n","https://leetcode.com/problems/merge-k-sorted-lists/"],"metadata":{"id":"nDJiN8TWJHAS"}},{"cell_type":"code","source":["# Definition for singly-linked list.\n","class ListNode(object):\n","    def __init__(self, val=0, next=None):\n","        self.val = val\n","        self.next = next\n","\n","class Solution(object):\n","    def mergeKLists(self, lists):\n","        \"\"\"\n","        :type lists: List[ListNode]\n","        :rtype: ListNode\n","        \"\"\"\n","        if not lists or len(lists) == 0:\n","          return None\n","\n","        while len(lists) > 1:\n","          mergerdLists = []\n","\n","          for i in range(0, len(lists), 2):\n","            l1 = lists[i]\n","            l2 = lists[i + 1] if (i + 1) < len(lists) else None\n","            mergedLists.append(self.mergeList(l1, l2))\n","          lists = mergedLists\n","        return lists[0]\n","\n","    def mergeList(self, l1, l2):\n","      dummy = ListNode()\n","      tail = dummy\n","\n","      while l1 and l2:\n","        if l1.val < l2.val:\n","          tail.next = l1\n","          l1 = l1.next\n","        else:\n","          tail.next = l2\n","          l2 = l2.next\n","        tail = tail.next\n","\n","      if l1:\n","        tail.next = l1\n","      elif l2:\n","        tail.next = l2\n","      return dummy.next\n","\n","# Heap solution is way much easier."],"metadata":{"id":"UTFcoITBJI_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import heapq\n","\n","# Definition for singly-linked list.\n","class ListNode:\n","  def __init__(self, val=0, next=None):\n","    self.val = val\n","    self.next = next\n","\n","class Solution:\n","  def mergeKLists(self, lists):\n","    \"\"\"\n","    :type lists: List[ListNode]\n","    :rtype: ListNode\n","    \"\"\"\n","    # Initialize a min heap\n","    min_heap = []\n","\n","    # Push the first element of each list into the min heap\n","    for node in lists:\n","        if node:\n","            heapq.heappush(min_heap, (node.val, node))\n","\n","    # Initialize a dummy node to build the merged list\n","    dummy = ListNode(0)\n","    current = dummy\n","\n","    # Merge the lists until the min heap is empty\n","    while min_heap:\n","        # Pop the node with the minimum value from the heap\n","        val, node = heapq.heappop(min_heap)\n","\n","        # Append the popped node to the merged list\n","        current.next = node\n","        current = current.next\n","\n","        # If there are remaining elements in the popped list, push the next element to the heap\n","        if node.next:\n","            heapq.heappush(min_heap, (node.next.val, node.next))\n","\n","    return dummy.next"],"metadata":{"id":"Ha7YiMd9Ln_z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***11. Reverse Nodes in K Group (Hard)***\n","\n","https://leetcode.com/problems/reverse-nodes-in-k-group/"],"metadata":{"id":"LvJyjgozJJaq"}},{"cell_type":"code","source":["class ListNode:\n","  def __init__(self, val=0, next=None):\n","    self.val = val\n","    self.next = next\n","\n","class Solution:\n","  def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n","    dummy = ListNode(0, head)\n","    groupPrev = dummy\n","\n","    while True:\n","      kth = self.getKth(groupPrev, k)\n","      if not kth:\n","        break\n","      groupNext = kth.next\n","\n","      # reverse group\n","      prev, curr = kth.next, groupPrev.next\n","      while curr != groupNext:\n","        tmp = curr.next\n","        curr.next = prev\n","        prev = curr\n","        curr = tmp\n","\n","      tmp = groupPrev.next\n","      groupPrev.next = kth\n","      groupPrev = tmp\n","\n","    return dummy.next\n","\n","  def getKth(self, curr, k):\n","    while curr and k > 0:\n","      curr = curr.next\n","      k -= 1\n","    return curr"],"metadata":{"id":"DxAY2CN6JKSW"},"execution_count":null,"outputs":[]}]}