{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***10. Heap & Priority Queue (7 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Kth Largest Element in a Stream (Easy)***\n","\n","https://leetcode.com/problems/kth-largest-element-in-a-stream/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["from typing import List\n","import heapq\n","\n","class KthLargest:\n","  def __init__(self, k: int, nums: List[int]):\n","    self.minHeap, self.k = nums, k\n","    heapq.heapify(self.minHeap)\n","    while len(self.minHeap) > k:\n","      heapq.heappop(self.minHeap)\n","\n","  def add(self, val: int) -> int:\n","    heapq.heappush(self.minHeap, val)\n","    if len(self.minHeap) > self.k:\n","      heapq.heappop(self.minHeap)\n","    return self.minHeap[0]"]},{"cell_type":"markdown","source":["***2. Last Stone Weight (Easy)***\n","\n","https://leetcode.com/problems/last-stone-weight/\n"],"metadata":{"id":"LH0SbvdQ5hD1"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def lastStoneWeight(self, stones: List[int]) -> int:\n","    stones = [-s for s in stones] # max heap\n","    heapq.heapify(stones)\n","\n","    while len(stones) > 1:\n","      first = -1 * heapq.heappop(stones)\n","      second = -1 * heapq.heappop(stones)\n","      if second < first: # first stone is always bigger/ max heap\n","        heapq.heappush(stones, -1 * (first - second))\n","\n","    stones.append(0) # edge case if stones is empty\n","    return abs(stones[0])"],"metadata":{"id":"2h4yrM3h5zB3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. K Closet Points to Origin (Medium)***\n","\n","https://leetcode.com/problems/k-closest-points-to-origin/\n"],"metadata":{"id":"JC9DNwXgKrI_"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n","    minHeap = []\n","    for x, y in points:\n","      dist = (x ** 2) + (y ** 2)\n","      minHeap.append([dist, x, y])\n","\n","    heapq.heapify(minHeap)\n","    res = []\n","    while k > 0:\n","      dist, x, y = heapq.heappop(minHeap)\n","      res.append([x, y])\n","      k -= 1\n","\n","    return res"],"metadata":{"id":"dA6SaQDfKtYK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Kth Largest Element in an Array (Medium)***\n","\n","https://leetcode.com/problems/kth-largest-element-in-an-array/\n"],"metadata":{"id":"-nDCIAZUKt09"}},{"cell_type":"code","source":["import heapq\n","from typing import List\n","\n","class Solution:\n","    def findKthLargest(self, nums: List[int], k: int) -> int:\n","        heap = []\n","\n","        for n in nums:\n","            heapq.heappush(heap, -1 * n)\n","\n","        for i in range(k):\n","            ans = -1 * (heapq.heappop(heap))\n","        return ans"],"metadata":{"id":"c43kihWAKv5U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import heapq\n","from typing import List\n","\n","class Solution:\n","    def findKthLargest(self, nums: List[int], k: int) -> int:\n","        heap = []\n","\n","        for n in nums:\n","            heapq.heappush(heap, n)\n","            if len(heap) > k:\n","                heapq.heappop(heap)\n","\n","        return heap[0]"],"metadata":{"id":"yX38_TYXy3Uh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Task Scheduler (Medium)***\n","\n","https://leetcode.com/problems/task-scheduler/\n"],"metadata":{"id":"bfGdcmNeKwsS"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def leastInterval(self, tasks: List[str], n: int) -> int:\n","    # each task 1 unit time\n","    # minimize idle time\n","\n","    count = Counter(tasks)\n","    maxHeap = [-cnt for cnt in count.values()]\n","    heapq.heapify(maxHeap)\n","\n","    time = 0\n","    q = deque() # pairs of [-cnt, idleTime]\n","    while maxHeap or q:\n","      time += 1 # time will be increased every iteration\n","      if maxHeap:\n","        cnt = 1 + heapq.heappop(maxHeap) # to increase negative value\n","        if cnt:\n","          q.append([cnt, time + n])\n","      if q and q[0][1] == time: # can perform that task again at q[0][1] == time\n","        heapq.heappush(maxHeap, q.popleft()[0])\n","    return time"],"metadata":{"id":"L-gT6TFfKy7I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Design Twitter (Medium)***\n","\n","https://leetcode.com/problems/design-twitter/\n"],"metadata":{"id":"iH5WIggKKzXq"}},{"cell_type":"code","source":["from typing import List\n","\n","class Twitter:\n","  def __init__(self):\n","    self.count = 0\n","    self.tweetMap = defaultdict(list) # userId -> list of [count, tweetId]\n","    self.followMap = defaultdict(set) # userId -> set of followeeId\n","\n","  def postTweet(self, userId: int, tweetId: int) -> None:\n","    self.tweetMap[userId].append([self.count, tweetId])\n","    self.count -= 1\n","\n","  def getNewsFeed(self, userId: int) -> List[int]:\n","    res = []\n","    minHeap = []\n","\n","    self.followMap[userId].add(userId)\n","    for followeeId in self.followMap[userId]:\n","      if followeeId in self.tweetMap:\n","        index = len(self.tweetMap[followeeId]) - 1\n","        count, tweetId = self.tweetMap[followeeId][index]\n","        minHeap.append([count, tweetId, followeeId, index - 1])\n","    heapq.heapify(minHeap)\n","\n","    while minHeap and len(res) < 10:\n","      count, tweetId, followeeId, index = heapq.heappop(minHeap)\n","      res.append(tweetId)\n","      if index >= 0:\n","        count, tweetId = self.tweetMap[followeeId][index]\n","        heapq.heappush(minHeap, [count, tweetId, followeeId, index - 1])\n","    return res\n","\n","  def follow(self, followerId: int, followeeId: int) -> None:\n","    self.followMap[followerId].add(followeeId)\n","\n","  def unfollow(self, followerId: int, followeeId: int) -> None:\n","    if followeeId in self.followMap[followerId]:\n","      self.followMap[followerId].remove(followeeId)"],"metadata":{"id":"_EVbgQL-K1zI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Find Median from Data Stream (Hard)***\n","\n","https://leetcode.com/problems/find-median-from-data-stream/"],"metadata":{"id":"tPP2cFGWK2So"}},{"cell_type":"code","source":["class MedianFinder:\n","  def __init__(self):\n","    # Two heaps -> Large, Small -> Min-Heap, Max-Heap\n","    # Heaps should be of equal size\n","    self.small, self.large = [], []\n","\n","  def addNum(self, num: int) -> None:\n","    heapq.heappush(self.small, -1 * num) # making max num become min\n","\n","    # Make sure every num in small is <= every num in large\n","    if (self.small and self.large and\n","        (-1 * self.small[0]) > self.large[0]):\n","      val = -1 * heapq.heappop(self.small) # Converting back to max num\n","      heapq.heappush(self.large, val)\n","\n","    # Uneven size?\n","    if len(self.small) > len(self.large) + 1:\n","      val = - 1 * heapq.heappop(self.small)\n","      heapq.heappush(self.large, val)\n","    if len(self.large) > len(self.small) + 1:\n","      val = heapq.heappop(self.large)\n","      heapq.heappush(self.small, -1 * val)\n","\n","  def findMedian(self) -> float:\n","    if len(self.small) > len(self.large):\n","      return -1 * self.small[0]\n","    if len(self.large) > len(self.small):\n","      return self.large[0]\n","\n","    return (-1 * self.small[0] + self.large[0]) / 2"],"metadata":{"id":"J7_SsAkBK3Jo"},"execution_count":null,"outputs":[]}]}