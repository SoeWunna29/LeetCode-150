{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***14. Advanced Graphs (6 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Reconstruct Itinerary (Hard)***\n","\n","https://leetcode.com/problems/reconstruct-itinerary/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q"},"outputs":[],"source":["from typing import List\n","\n","class Solution:\n","  def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n","    adj = {src:[] for src, dst in tickets}\n","\n","    tickets.sort() # want to return in smallest lexical order\n","    for src, dst in tickets: # adjacency list source to destinations\n","      adj[src].append(dst)\n","\n","    res = [\"JFK\"] # as given\n","    def dfs(src):\n","      if len(res) == len(tickets) + 1: # visited all dst + starting city\n","        return True\n","      if src not in adj: # no outgoing\n","        return False\n","\n","      temp = list(adj[src])\n","      for i, v in enumerate(temp): # index, node\n","        adj[src].pop(i)\n","        res.append(v)\n","        if dfs(v):\n","          return True\n","        # Backtracking - when False is returned, no outgoing\n","        adj[src].insert(i, v)\n","        res.pop()\n","      return False\n","\n","    dfs(\"JFK\")\n","    return res"]},{"cell_type":"code","source":["class Solution:\n","    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n","      adj = {src: [] for src, dst in tickets}\n","      res = []\n","\n","      for src, dst in tickets:\n","        adj[src].append(dst)\n","\n","      for key in adj:\n","        adj[key].sort()\n","\n","      def dfs(adj, result, src):\n","        if src in adj:\n","          destinations = adj[src][:]\n","          while destinations:\n","            dest = destinations[0]\n","            adj[src].pop(0)\n","            dfs(adj, res, dest)\n","            destinations = adj[src][:]\n","        res.append(src)\n","\n","      dfs(adj, res, \"JFK\")\n","      res.reverse()\n","\n","      if len(res) != len(tickets) + 1:\n","        return []\n","\n","      return res"],"metadata":{"id":"ZYoMTj8LE1bz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***2. Min Cost to Connect All Points (Medium)***\n","\n","https://leetcode.com/problems/min-cost-to-connect-all-points/\n"],"metadata":{"id":"kWDfmFzm7Kuy"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def minCostConnectPoints(self, points: List[List[int]]) -> int:\n","    # Building adjacency list to use in Prim's algorithm\n","    N = len(points)\n","    adj = {i: [] for i in range(N)}  # i : list of [cost, node]\n","    for i in range(N):\n","      x1, y1 = points[i]\n","      for j in range(i + 1, N):\n","        x2, y2 = points[j]\n","        dist = abs(x1 - x2) + abs(y1 - y2)\n","        adj[i].append([dist, j])\n","        adj[j].append([dist, i])\n","\n","    # Prim's\n","    res = 0\n","    visit = set()\n","    minH = [[0, 0]]  # [cost, point]\n","    while len(visit) < N:\n","      cost, i = heapq.heappop(minH)\n","      if i in visit:\n","        continue\n","      res += cost\n","      visit.add(i)\n","      for neiCost, nei in adj[i]:\n","        if nei not in visit:\n","          heapq.heappush(minH, [neiCost, nei])\n","    return res\n","\n","# Prim's Minimum Spanning Tree"],"metadata":{"id":"AZgPzoBf7bZH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Network Delay Time (Medium)***\n","\n","https://leetcode.com/problems/network-delay-time/"],"metadata":{"id":"inJzSrFJMXED"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n","    edges = collections.defaultdict(list)\n","    for u, v, w in times:\n","      edges[u].append((v, w))\n","\n","    minHeap = [(0, k)] # weight, node - k is the starting node\n","    visit = set()\n","    t = 0 # weight\n","    while minHeap:\n","      w1, n1 = heapq.heappop(minHeap)\n","      if n1 in visit: # shortest dist node will be in the visit set first\n","        continue\n","      visit.add(n1)\n","      t = max(t, w1)\n","\n","      for n2, w2 in edges[n1]: # visiting neighbors\n","        if n2 not in visit:\n","          heapq.heappush(minHeap, (w1 + w2, n2)) # w1 + w2 is total weight to reach n2\n","\n","    return t if len(visit) == n else -1\n","\n","# Dijkstra Algorithm"],"metadata":{"id":"3DCvPpf8MY68"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Swim in Rising Water (Hard)***\n","\n","https://leetcode.com/problems/swim-in-rising-water/"],"metadata":{"id":"lYo789L_MZVT"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def swimInWater(self, grid: List[List[int]]) -> int:\n","    N = len(grid)\n","    visit = set()\n","    minH = [[grid[0][0], 0, 0]] # (time or max_height, r, c)\n","    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n","\n","    visit.add((0, 0))\n","    while minH:\n","      t, r, c, = heapq.heappop(minH)\n","      if r == N - 1 and c == N - 1: # reached the bottom right or dst\n","        return t\n","      for dr, dc in directions:\n","        neiR, neiC = r + dr, c + dc\n","        if (neiR < 0 or neiC < 0 or\n","            neiR == N or neiC == N or\n","            (neiR, neiC) in visit):\n","          continue\n","        visit.add((neiR, neiC))\n","        heapq.heappush(minH, [max(t, grid[neiR][neiC]), neiR, neiC])"],"metadata":{"id":"XhKXLthaMbOu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Alien Dictionary (Hard)***\n","\n","https://leetcode.com/problems/alien-dictionary/\n","\n","https://www.lintcode.com/problem/892/"],"metadata":{"id":"7B-EqAI3MbsG"}},{"cell_type":"code","source":["# Topological Sort\n","from typing import List\n","\n","class Solution:\n","  def alienOrder(self, words: List[str]) -> str:\n","    adj = {c:set() for w in words for c in w}\n","\n","    for i in range(len(words) - 1):\n","      w1, w2 = words[i], words[i + 1]\n","      minLen = min(len(w1), len(w2))\n","      if len(w1) > len(w2) and w1[:minLen] == w2[:minLen]:\n","        return \"\"\n","      for j in range(minLen):\n","        if w1[j] != w2[j]:\n","          adj[w1[j]].add(w2[j])\n","          break\n","\n","      visit = {} # False=visited, True=current path\n","      res = []\n","\n","      def dfs(c):\n","        if c in visit:\n","          return visit[c]\n","\n","        visit[c] = True\n","        for nei in adj[c]:\n","          if dfs(nei):\n","            return True\n","        visit[c] = False\n","        res.append(c)\n","\n","      for c in adj:\n","        if dfs(c):\n","          return \"\"\n","\n","      res.reverse()\n","      return \"\".join(res)"],"metadata":{"id":"ebenxnOOMfJd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Cheapest Flights with K Stops (Medium)***\n","\n","https://leetcode.com/problems/cheapest-flights-within-k-stops/"],"metadata":{"id":"Z8jm1qRMMfjy"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n","    prices = [float(\"inf\")] * n\n","    prices[src] = 0\n","\n","    for i in range(k + 1): # need to run loop k + 1 times\n","      tmpPrices = prices.copy()\n","\n","      for s, d, p in flights: # a=source, d=destination, p=price\n","        if prices[s] == float(\"inf\"):\n","          continue\n","        if prices[s] + p < tmpPrices[d]:\n","          tmpPrices[d] = prices[s] + p\n","      prices = tmpPrices\n","\n","    return -1 if prices[dst] == float(\"inf\") else prices[dst]\n","\n","# Bellman-Ford"],"metadata":{"id":"CVgPZojFMgO0","executionInfo":{"status":"ok","timestamp":1714031106074,"user_tz":420,"elapsed":312,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":2,"outputs":[]}]}