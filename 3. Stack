{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***3. Stack (7 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Valid Parentheses (Easy)***\n","\n","https://leetcode.com/problems/valid-parentheses/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q","executionInfo":{"status":"ok","timestamp":1713306231511,"user_tz":420,"elapsed":3,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"8f1b3f5a-066f-4d96-e5b0-1dc14ed9cb33","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}],"source":["class Solution:\n","  def is_valid(self, s: str) -> bool:\n","    stack = []\n","    closeToOpen = {\")\": \"(\",\n","                   \"]\": \"[\",\n","                   \"}\": \"{\"}\n","\n","    for c in s:\n","      if c in closeToOpen: # if c is the close bracket\n","        if stack and stack[-1] == closeToOpen[c]:\n","          stack.pop()\n","        else: # can't start with close bracket\n","          return False\n","      else: # if c is open bracket\n","        stack.append(c)\n","\n","    return True if not stack else False\n","\n","sol = Solution()\n","s = \"()[]{}\"\n","print(sol.is_valid(s))"]},{"cell_type":"markdown","source":["***2. Min Stack (Medium)***\n","\n","https://leetcode.com/problems/min-stack/"],"metadata":{"id":"wzQS1M-S1l_J"}},{"cell_type":"code","source":["class MinStack:\n","  def __init__(self):\n","    self.stack = []\n","    self.minStack = []\n","\n","  def push(self, val: int) -> None:\n","    self.stack.append(val)\n","    val = min(val, self.minStack[-1] if self.minStack else val)\n","    self.minStack.append(val)\n","\n","  def pop(self) -> None:\n","    self.stack.pop()\n","    self.minStack.pop()\n","\n","  def top(self) -> int:\n","    return self.stack[-1]\n","\n","  def getMin(self) -> int:\n","    return self.minStack[-1]"],"metadata":{"id":"2BmeBxEP2BW5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***3. Evaluate Reverse Polish Notation (Medium)***\n","\n","https://leetcode.com/problems/evaluate-reverse-polish-notation/\n"],"metadata":{"id":"b8mESITWH_ME"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def evalRPN(self, tokens: List[str]) -> int:\n","    stack = []\n","    for c in tokens:\n","      if c == \"+\":\n","        stack.append(stack.pop() + stack.pop())\n","      elif c == \"-\":\n","        a, b = stack.pop(), stack.pop()\n","        stack.append(b - a)\n","      elif c == \"*\":\n","        stack.append(stack.pop() * stack.pop())\n","      elif c == \"/\":\n","        a, b = stack.pop(), stack.pop()\n","        stack.append(int(b / a))\n","      else:\n","        stack.append(int(c))\n","    return stack[0]"],"metadata":{"id":"-XkVSSqBIBfo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***4. Generate Parentheses (Medium)***\n","\n","https://leetcode.com/problems/generate-parentheses/\n"],"metadata":{"id":"KO1wRLybIB7b"}},{"cell_type":"code","source":["class Solution:\n","  def generateParenthesis(self, n: int) -> List[str]:\n","    # only add open parenthesis if open < n\n","    # only add a closing parenthesis if closed < open\n","    # valid if open == closed == n\n","\n","    stack = []\n","    res = []\n","\n","    def backtrack(openN, closedN):\n","      if openN == closedN == n:\n","        res.append(\"\".join(stack))\n","        return\n","\n","      if openN < n:\n","        stack.append(\"(\")\n","        backtrack(openN + 1, closedN)\n","        stack.pop()\n","\n","      if closedN < openN:\n","        stack.append(\")\")\n","        backtrack(openN, closedN + 1)\n","        stack.pop()\n","\n","    backtrack(0, 0)\n","    return res"],"metadata":{"id":"Cg6QTB3EIELj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***5. Daily Temperatures (Medium)***\n","\n","https://leetcode.com/problems/daily-temperatures/"],"metadata":{"id":"CzI9O9KiIElr"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n","    res = [0] * len(temperatures)\n","    stack = [] # pair: [temp, index]\n","\n","    for i, t in enumerate(temperatures): # index, temp\n","      while stack and t > stack[-1][0]:\n","        stackT, stackInd = stack.pop()\n","        res[stackInd] = (i - stackInd) # will replace in corresponding index\n","      stack.append([t, i])\n","    return res\n","\n","# Monotonic decreasing stack"],"metadata":{"id":"i0Ty9D3wIGcj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***6. Car Fleet (Medium)***\n","\n","https://leetcode.com/problems/car-fleet/"],"metadata":{"id":"SSGbrvGUIG5k"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n","    pair = [[p, s] for p, s in zip(position, speed)]\n","\n","    stack = []\n","    for p, s in sorted(pair)[::-1]: # Reverse Sorted Order\n","      stack.append((target - p) / s) # (distance - position) / speed\n","      if len(stack) >= 2 and stack[-1] <= stack[-2]: # car behind is catching up\n","        stack.pop()\n","    return len(stack)"],"metadata":{"id":"RSBm9Yc6IJUq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***7. Largest Rectangle in Histogram (Hard)***\n","\n","https://leetcode.com/problems/largest-rectangle-in-histogram/"],"metadata":{"id":"PWuXYG-eIJwb"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def largestRectangleArea(self, heights: List[int]) -> int:\n","    maxArea = 0\n","    stack = [] # pair: (index, height)\n","\n","    for i, h in enumerate(heights):\n","      start = i\n","      while stack and stack[-1][1] > h:\n","        index, height = stack.pop()\n","        maxArea = max(maxArea, height * (i - index))\n","        start = index\n","      stack.append((start, h))\n","\n","    for i, h in stack:\n","      maxArea = max(maxArea, h * (len(heights) - i))\n","    return maxArea"],"metadata":{"id":"gTY4C7ZEIpc3","executionInfo":{"status":"ok","timestamp":1713404935645,"user_tz":420,"elapsed":4,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}}},"execution_count":1,"outputs":[]}]}