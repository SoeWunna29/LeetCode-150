{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#NeetCode 150"],"metadata":{"id":"L6o4sF1AcXWX"}},{"cell_type":"markdown","source":["##***2. Two Pointers (5 Questions)***"],"metadata":{"id":"gr0MIyvLcv7A"}},{"cell_type":"markdown","source":["***1. Valid Palindrome (Easy)***\n","\n","https://leetcode.com/problems/valid-palindrome/"],"metadata":{"id":"DZmyjE-ndF3v"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEvD2gXtcT7q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712797863428,"user_tz":420,"elapsed":8,"user":{"displayName":"Soe Wunna","userId":"11580853380682839977"}},"outputId":"2ed637d0-ce13-4ac1-89db-36457aeb4a52"},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}],"source":["class Solution:\n","  def is_palindrome(self, s: str) -> bool:\n","    # Convert to lowercase and remove non-alphanumeric characters\n","    cleaned_s = ''.join(char.lower() for char in s if char.isalnum())\n","\n","    # Check if the cleaned string is equal to its reverse\n","    return cleaned_s == cleaned_s[::-1]\n","\n","sol = Solution()\n","s = \"A man, a plan, a canal: Panama\"\n","print(sol.is_palindrome(s))"]},{"cell_type":"markdown","source":["***2. Two Sum II Input Array is Sorted (Medium)***\n","\n","https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"],"metadata":{"id":"oLRCI8Fv1N_K"}},{"cell_type":"code","source":["def two_sum2(numbers, target):\n","    l, r = 0, len(numbers) - 1\n","\n","    while l < r:\n","        curSum = numbers[l] + numbers[r]\n","\n","        if curSum > target:\n","            r -= 1\n","        elif curSum < target:\n","            l += 1\n","        else:\n","            return [l + 1, r + 1]\n","    return\n","\n","numbers = [2, 7, 11, 15]\n","target = 9\n","print(two_sum2(numbers, target))"],"metadata":{"id":"qllB_Km01a7r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712789639600,"user_tz":420,"elapsed":214,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"e2e3bcce-05c0-4858-e21e-0e3478699384"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2]\n"]}]},{"cell_type":"markdown","source":["***3. 3 Sum (Medium)***\n","\n","https://leetcode.com/problems/3sum/"],"metadata":{"id":"pP-3yKMmHm3c"}},{"cell_type":"code","source":["def three_sum(nums):\n","    res = []\n","    nums.sort()\n","\n","    for i, a in enumerate(nums):\n","        if i > 0 and a == nums[i - 1]:\n","            continue\n","\n","        l = i + 1\n","        r = len(nums) - 1\n","        while l < r:\n","            threeSum = a + nums[l] + nums[r]\n","            if threeSum > 0:\n","                r -= 1\n","            elif threeSum < 0:\n","                l += 1\n","            else:\n","                res.append([a, nums[l], nums[r]])\n","                l += 1\n","                while nums[l] == nums[l - 1] and l < r:\n","                    l += 1\n","\n","    return res\n","\n","nums = [-1, 0, 1, 2, -1, -4]\n","print(three_sum(nums))"],"metadata":{"id":"f0sVgC6KHp9z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712789559313,"user_tz":420,"elapsed":15,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"b8942254-4012-41fc-d93e-1cd1935f43c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-1, -1, 2], [-1, 0, 1]]\n"]}]},{"cell_type":"markdown","source":["***4. Container with Most Water (Medium)***\n","\n","https://leetcode.com/problems/container-with-most-water/"],"metadata":{"id":"-EesxNdeHqaT"}},{"cell_type":"code","source":["height = [1, 8, 6, 2, 5, 4, 8, 3 ,7]\n","left = 0\n","right = len(height) - 1\n","area = 0\n","\n","while left < right:\n","  area = max(area, (right - left) * min(height[left], height[right]))\n","  if height[left] < height[right]:\n","    left += 1\n","  else:\n","    right -= 1\n","\n","print(area)"],"metadata":{"id":"QBJWHB7QHtyy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712789605926,"user_tz":420,"elapsed":195,"user":{"displayName":"SOE WUNNA","userId":"03037672760754318381"}},"outputId":"23ce4dd4-97be-49a5-b026-307226151163"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["49\n"]}]},{"cell_type":"markdown","source":["***5. Trapping Rain Water (Hard)***\n","\n","https://leetcode.com/problems/trapping-rain-water/"],"metadata":{"id":"qkR_eU2AHuJ7"}},{"cell_type":"code","source":["from typing import List\n","\n","class Solution:\n","  def trap(self, height: List[int]) -> int:\n","    if not height: return 0\n","\n","    l, r = 0, len(height) - 1\n","    leftMax, rightMax = height[l], height[r]\n","    res = 0\n","\n","    while l < r:\n","      if leftMax < rightMax:\n","        l += 1\n","        leftMax = max(leftMax, height[l])\n","        res += leftMax - height[l]\n","      else:\n","        r -= 1\n","        rightMax = max(rightMax, height[r])\n","        res += rightMax - height[r]\n","\n","    return res"],"metadata":{"id":"Lb-DZqSfHvTi"},"execution_count":null,"outputs":[]}]}